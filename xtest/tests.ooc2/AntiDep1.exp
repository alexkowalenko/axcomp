; ModuleID = 'AntiDep1'
source_filename = "AntiDep1"

%0 = type { i64 }
%1 = type { i64 }

@AntiDep1_r = internal global %0 zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal i64 @AntiDep1_P() {
entry:
  %x = alloca i64
  store i64 0, i64* %x
  %r = load %0, %0* @AntiDep1_r
  %idx = load i64, i64* getelementptr inbounds (%0, %0* @AntiDep1_r, i64 0, i32 0)
  store i64 %idx, i64* %x
  store i64 2, i64* getelementptr inbounds (%0, %0* @AntiDep1_r, i64 0, i32 0)
  %x1 = load i64, i64* %x
  ret i64 %x1
}

define void @AntiDep1_Test() {
entry:
  store i64 1, i64* getelementptr inbounds (%0, %0* @AntiDep1_r, i64 0, i32 0)
  %r = load %0, %0* @AntiDep1_r
  %idx = load i64, i64* getelementptr inbounds (%0, %0* @AntiDep1_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx, i64 0)
  call void @Out_Ln()
  %0 = call i64 @AntiDep1_P()
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  %r1 = load %0, %0* @AntiDep1_r
  %idx2 = load i64, i64* getelementptr inbounds (%0, %0* @AntiDep1_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx2, i64 0)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @AntiDep1_Test()
  ret i64 0
}
