; ModuleID = 'nested'
source_filename = "nested"

@nested_x = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal i64 @nested_f() {
entry:
  %x = alloca i64
  store i64 2, i64* %x
  %0 = call i64 @nested_f_g()
  %x1 = load i64, i64* %x
  %x2 = load i64, i64* %x
  call void @Out_Int(i64 %x1, i64 %x2)
  call void @Out_Ln()
  %x3 = load i64, i64* %x
  ret i64 %x3
}

define internal i64 @nested_f_g() {
entry:
  %x = alloca i64
  store i64 1, i64* %x
  %x1 = load i64, i64* %x
  %x2 = load i64, i64* %x
  call void @Out_Int(i64 %x1, i64 %x2)
  call void @Out_Ln()
  %x3 = load i64, i64* %x
  ret i64 %x3
}

define internal i64 @nested_g() {
entry:
  %x = alloca i64
  store i64 4, i64* %x
  %x1 = load i64, i64* %x
  %x2 = load i64, i64* %x
  call void @Out_Int(i64 %x1, i64 %x2)
  call void @Out_Ln()
  %x3 = load i64, i64* %x
  ret i64 %x3
}

define i64 @output() {
entry:
  store i64 3, i64* @nested_x
  %x = load i64, i64* @nested_x
  %x1 = load i64, i64* @nested_x
  call void @Out_Int(i64 %x, i64 %x1)
  call void @Out_Ln()
  %0 = call i64 @nested_f()
  %x2 = load i64, i64* @nested_x
  %x3 = load i64, i64* @nested_x
  call void @Out_Int(i64 %x2, i64 %x3)
  call void @Out_Ln()
  %1 = call i64 @nested_g()
  ret i64 0
}
