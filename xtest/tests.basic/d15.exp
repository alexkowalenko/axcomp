; ModuleID = 'd15'
source_filename = "d15"

@d15_a = internal global i64 0
@d15_b = internal global i64 0

declare void @WriteInt(i64)

declare void @WriteLn()

define internal void @d15_h(i64 %x, i64* %y) {
entry:
  %y2 = alloca i64*
  %x1 = alloca i64
  store i64 %x, i64* %x1
  store i64* %y, i64** %y2
  %x3 = load i64, i64* %x1
  call void @WriteInt(i64 %x3)
  call void @WriteLn()
  %y4 = load i64*, i64** %y2
  %y5 = load i64, i64* %y4
  call void @WriteInt(i64 %y5)
  call void @WriteLn()
  store i64 10, i64* %x1
  %y6 = load i64*, i64** %y2
  %y7 = load i64*, i64** %y2
  store i64 20, i64* %y7
  %x8 = load i64, i64* %x1
  call void @WriteInt(i64 %x8)
  call void @WriteLn()
  %y9 = load i64*, i64** %y2
  %y10 = load i64, i64* %y9
  call void @WriteInt(i64 %y10)
  call void @WriteLn()
  ret void
}

define i64 @output() {
entry:
  store i64 1, i64* @d15_a
  store i64 2, i64* @d15_b
  %a = load i64, i64* @d15_a
  call void @d15_h(i64 %a, i64* @d15_b)
  %a1 = load i64, i64* @d15_a
  call void @WriteInt(i64 %a1)
  call void @WriteLn()
  %b = load i64, i64* @d15_b
  call void @WriteInt(i64 %b)
  call void @WriteLn()
  ret i64 0
}
