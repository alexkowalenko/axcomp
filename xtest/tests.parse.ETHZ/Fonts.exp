MODULE Fonts;
IMPORT SYSTEM,
Files;
    CONST
        FontFileId = 0dbH;
    TYPE
        Font* = POINTER TO FontDesc;
        FontDesc* = RECORD
            name*: ARRAY 32 OF CHAR;
            height*: INTEGER;
            minX*: INTEGER;
            maxX*: INTEGER;
            minY*: INTEGER;
            maxY*: INTEGER;
            next*: Font;
            T: ARRAY 128 OF INTEGER;
            raster: ARRAY 2360 OF BYTE
        END;
        LargeFontDesc = RECORD (FontDesc)
            ext: ARRAY 2560 OF BYTE
        END;
        LargeFont = POINTER TO LargeFontDesc;
    VAR
        Default*: Font;
        root*: Font;

    PROCEDURE GetPat*(fnt : Font; ch : CHAR; VAR dx : INTEGER; VAR x : INTEGER; VAR y : INTEGER; VAR w : INTEGER; VAR h : INTEGER; VAR patadr : INTEGER);
        VAR
            pa: INTEGER;
            dxb: BYTE;
            xb: BYTE;
            yb: BYTE;
            wb: BYTE;
            hb: BYTE;
    BEGIN
        pa := fnt.T[ORD(ch) MOD 080H];
        patadr := pa;
        SYSTEM.GET(pa-3, dxb);
        SYSTEM.GET(pa-2, xb);
        SYSTEM.GET(pa-1, yb);
        SYSTEM.GET(pa, wb);
        SYSTEM.GET(pa+1, hb);
        dx := dxb;
        x := xb;
        y := yb;
        w := wb;
        h := hb;
        IF yb < 128 THEN
            y := yb
        ELSE
            y := yb-256
        END
    END GetPat;

    PROCEDURE This*(name : ARRAY OF CHAR): Font;
        TYPE
            RunRec = RECORD
                beg: BYTE;
                end: BYTE
            END;
            BoxRec = RECORD
                dx: BYTE;
                x: BYTE;
                y: BYTE;
                w: BYTE;
                h: BYTE
            END;
        VAR
            F: Font;
            LF: LargeFont;
            f: Files.File;
            R: Files.Rider;
            NofRuns: BYTE;
            NofBoxes: BYTE;
            NofBytes: INTEGER;
            height: BYTE;
            minX: BYTE;
            maxX: BYTE;
            minY: BYTE;
            maxY: BYTE;
            i: INTEGER;
            j: INTEGER;
            k: INTEGER;
            m: INTEGER;
            n: INTEGER;
            a: INTEGER;
            a0: INTEGER;
            b: BYTE;
            beg: BYTE;
            end: BYTE;
            run: ARRAY 16 OF RunRec;
            box: ARRAY 512 OF BoxRec;
        PROCEDURE RdInt16(VAR R : Files.Rider; VAR b0 : BYTE);
            VAR
                b1: BYTE;
        BEGIN
            Files.ReadByte(R, b0);
            Files.ReadByte(R, b1)
        END RdInt16;
    BEGIN
        F := root;
        WHILE  (F # NIL)  &  (name # F.name)  DO
            F := F.next
        END;
        IF F = NIL THEN
            f := Files.Old(name);
            IF f # NIL THEN
                Files.Set(R, f, 0);
                Files.ReadByte(R, b);
                IF b = FontFileId THEN
                    Files.ReadByte(R, b);
                    Files.ReadByte(R, b);
                    Files.ReadByte(R, b);
                    NEW(F);
                    F.name := name;
                    RdInt16(R, height);
                    RdInt16(R, minX);
                    RdInt16(R, maxX);
                    RdInt16(R, minY);
                    RdInt16(R, maxY);
                    RdInt16(R, NofRuns);
                    NofBoxes := 0;
                    k := 0;
                    WHILE k # NofRuns DO
                        RdInt16(R, beg);
                        run[k].beg := beg;
                        RdInt16(R, end);
                        run[k].end := end;
                        NofBoxes := NofBoxes+end-beg;
                        INC(k)
                    END;
                    NofBytes := 5;
                    j := 0;
                    WHILE j # NofBoxes DO
                        RdInt16(R, box[j].dx);
                        RdInt16(R, box[j].x);
                        RdInt16(R, box[j].y);
                        RdInt16(R, box[j].w);
                        RdInt16(R, box[j].h);
                        NofBytes := NofBytes+5+ (box[j].w+7)  DIV 8*box[j].h;
                        INC(j)
                    END;
                    IF NofBytes < 2300 THEN
                        NEW(F)
                    ELSE
                        NEW(LF);
                        F := LF
                    END;
                    F.name := name;
                    F.height := height;
                    F.minX := minX;
                    F.maxX := maxX;
                    F.maxY := maxY;
                    IF minY >= 080H THEN
                        F.minY := minY-0100H
                    ELSE
                        F.minY := minY
                    END;
                    a0 := SYSTEM.ADR(F.raster);
                    SYSTEM.PUT(a0, 00X);
                    SYSTEM.PUT(a0+1, 00X);
                    SYSTEM.PUT(a0+2, 00X);
                    SYSTEM.PUT(a0+3, 00X);
                    SYSTEM.PUT(a0+4, 00X);
                    INC(a0, 2);
                    a := a0+3;
                    j := 0;
                    k := 0;
                    m := 0;
                    WHILE k < NofRuns DO
                        WHILE  (m < run[k].beg)  &  (m < 128)  DO
                            F.T[m] := a0;
                            INC(m)
                        END;
                        WHILE  (m < run[k].end)  &  (m < 128)  DO
                            F.T[m] := a+3;
                            SYSTEM.PUT(a, box[j].dx);
                            SYSTEM.PUT(a+1, box[j].x);
                            SYSTEM.PUT(a+2, box[j].y);
                            SYSTEM.PUT(a+3, box[j].w);
                            SYSTEM.PUT(a+4, box[j].h);
                            INC(a, 5);
                            n :=  (box[j].w+7)  DIV 8*box[j].h;
                            WHILE n # 0 DO
                                DEC(n);
                                Files.ReadByte(R, b);
                                SYSTEM.PUT(a, b);
                                INC(a)
                            END;
                            INC(j);
                            INC(m)
                        END;
                        INC(k)
                    END;
                    WHILE m < 128 DO
                        F.T[m] := a0;
                        INC(m)
                    END;
                    F.next := root;
                    root := F
                ELSE
                    F := Default
                END
            ELSE
                F := Default
            END
        END;
        RETURN F
    END This;

    PROCEDURE Free*;
        VAR
            f: Font;
    BEGIN
        f := root.next;
        IF f # NIL THEN
            f := f.next
        END;
        f.next := NIL
    END Free;

BEGIN
    root := NIL;
    Default := This("Oberon10.Scn.Fnt")
END Fonts.
