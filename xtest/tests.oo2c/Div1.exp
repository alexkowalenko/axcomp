; ModuleID = 'Div1'
source_filename = "Div1"

@STRING_0 = private global [0 x i32] [i32 32, i32 68, i32 73, i32 86, i32 32, i32 0]
@STRING_1 = private global [0 x i32] [i32 32, i32 61, i32 32, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_String([0 x i32]*)

define internal void @Div1_Div(i64 %i, i64 %j) {
entry:
  %j2 = alloca i64
  %i1 = alloca i64
  store i64 %i, i64* %i1
  store i64 %j, i64* %j2
  %i3 = load i64, i64* %i1
  call void @Out_Int(i64 %i3, i64 3)
  call void @Out_String([0 x i32]* @STRING_0)
  %j4 = load i64, i64* %j2
  call void @Out_Int(i64 %j4, i64 0)
  call void @Out_String([0 x i32]* @STRING_1)
  %i5 = load i64, i64* %i1
  %j6 = load i64, i64* %j2
  %divtmp = sdiv i64 %i5, %j6
  call void @Out_Int(i64 %divtmp, i64 0)
  call void @Out_Ln()
  ret void
}

define void @Div1_Test() {
entry:
  %i = alloca i64
  store i64 0, i64* %i
  store i64 -6, i64* %i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i1 = load i64, i64* %i
  call void @Div1_Div(i64 %i1, i64 3)
  %index = load i64, i64* %i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* %i
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 6
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond2 = icmp sge i64 %nextvar, 6
  br i1 %loopcond2, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret void
}

define i64 @output() {
entry:
  call void @Div1_Test()
  ret i64 0
}
