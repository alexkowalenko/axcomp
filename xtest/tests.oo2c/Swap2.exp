; ModuleID = 'Swap2'
source_filename = "Swap2"

@Swap2_x = internal global i64 0
@Swap2_y = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal void @Swap2_Swap(i1 %swap1) {
entry:
  %h = alloca i64
  %hy = alloca i64
  %hx = alloca i64
  %swap = alloca i1
  store i1 %swap1, i1* %swap
  store i64 0, i64* %hx
  store i64 0, i64* %hy
  store i64 0, i64* %h
  %x = load i64, i64* @Swap2_x
  store i64 %x, i64* %hx
  %y = load i64, i64* @Swap2_y
  store i64 %y, i64* %hy
  %swap2 = load i1, i1* %swap
  br i1 %swap2, label %then, label %ifcont

then:                                             ; preds = %entry
  %hx3 = load i64, i64* %hx
  store i64 %hx3, i64* %h
  %hy4 = load i64, i64* %hy
  store i64 %hy4, i64* %hx
  %h5 = load i64, i64* %h
  store i64 %h5, i64* %hy
  br label %ifcont

ifcont:                                           ; preds = %then, %entry
  %hx6 = load i64, i64* %hx
  store i64 %hx6, i64* @Swap2_x
  %hy7 = load i64, i64* %hy
  store i64 %hy7, i64* @Swap2_y
  ret void
}

define void @Swap2_Test() {
entry:
  store i64 1, i64* @Swap2_x
  store i64 2, i64* @Swap2_y
  call void @Swap2_Swap(i1 false)
  %x = load i64, i64* @Swap2_x
  call void @Out_Int(i64 %x, i64 2)
  %y = load i64, i64* @Swap2_y
  call void @Out_Int(i64 %y, i64 2)
  call void @Out_Ln()
  call void @Swap2_Swap(i1 true)
  %x1 = load i64, i64* @Swap2_x
  call void @Out_Int(i64 %x1, i64 2)
  %y2 = load i64, i64* @Swap2_y
  call void @Out_Int(i64 %y2, i64 2)
  call void @Out_Ln()
  call void @Swap2_Swap(i1 true)
  %x3 = load i64, i64* @Swap2_x
  call void @Out_Int(i64 %x3, i64 2)
  %y4 = load i64, i64* @Swap2_y
  call void @Out_Int(i64 %y4, i64 2)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @Swap2_Test()
  ret i64 0
}
