; ModuleID = 'Ash1'
source_filename = "Ash1"

@STRING_0 = private global [0 x i32] [i32 32, i32 32, i32 0]

declare i64 @ASH(i64, i64)

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

declare void @Out_String([0 x i32]*)

define internal void @Ash1_Ash(i64 %x, i64 %n, i64 %res) {
entry:
  %res3 = alloca i64
  %n2 = alloca i64
  %x1 = alloca i64
  store i64 %x, i64* %x1
  store i64 %n, i64* %n2
  store i64 %res, i64* %res3
  %x4 = load i64, i64* %x1
  call void @Out_Int(i64 %x4, i64 4)
  call void @Out_Char(i32 44)
  %n5 = load i64, i64* %n2
  call void @Out_Int(i64 %n5, i64 0)
  call void @Out_String([0 x i32]* @STRING_0)
  %res6 = load i64, i64* %res3
  call void @Out_Int(i64 %res6, i64 4)
  %x7 = load i64, i64* %x1
  %n8 = load i64, i64* %n2
  %0 = call i64 @ASH(i64 %x7, i64 %n8)
  call void @Out_Int(i64 %0, i64 4)
  call void @Out_Ln()
  ret void
}

define void @Ash1_Test() {
entry:
  %si = alloca i64
  store i64 0, i64* %si
  %0 = call i64 @ASH(i64 0, i64 0)
  call void @Ash1_Ash(i64 0, i64 0, i64 %0)
  %1 = call i64 @ASH(i64 0, i64 1)
  call void @Ash1_Ash(i64 0, i64 1, i64 %1)
  %2 = call i64 @ASH(i64 0, i64 -1)
  call void @Ash1_Ash(i64 0, i64 -1, i64 %2)
  %3 = call i64 @ASH(i64 1, i64 0)
  call void @Ash1_Ash(i64 1, i64 0, i64 %3)
  %4 = call i64 @ASH(i64 1, i64 1)
  call void @Ash1_Ash(i64 1, i64 1, i64 %4)
  %5 = call i64 @ASH(i64 1, i64 -1)
  call void @Ash1_Ash(i64 1, i64 -1, i64 %5)
  %6 = call i64 @ASH(i64 -1, i64 0)
  call void @Ash1_Ash(i64 -1, i64 0, i64 %6)
  %7 = call i64 @ASH(i64 -1, i64 1)
  call void @Ash1_Ash(i64 -1, i64 1, i64 %7)
  %8 = call i64 @ASH(i64 -1, i64 -1)
  call void @Ash1_Ash(i64 -1, i64 -1, i64 %8)
  store i64 1, i64* %si
  %si1 = load i64, i64* %si
  %si2 = load i64, i64* %si
  %9 = call i64 @ASH(i64 %si2, i64 8)
  call void @Ash1_Ash(i64 %si1, i64 8, i64 %9)
  ret void
}

define i64 @output() {
entry:
  call void @Ash1_Test()
  ret i64 0
}
