; ModuleID = 'HOTLoop2'
source_filename = "HOTLoop2"

@STRING_0 = private global [1 x i32] zeroinitializer
@STRING_1 = private global [2 x i32] [i32 97, i32 0]
@STRING_2 = private global [4 x i32] [i32 97, i32 98, i32 99, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal i64 @HOTLoop2_Len([0 x i32]* %str1) {
entry:
  %i = alloca i64
  %str = alloca [0 x i32]*
  store [0 x i32]* %str1, [0 x i32]** %str
  store i64 0, i64* %i
  store i64 0, i64* %i
  br label %while

while:                                            ; preds = %loop, %entry
  %str2 = load [0 x i32]*, [0 x i32]** %str
  %i3 = load i64, i64* %i
  %0 = load [0 x i32]*, [0 x i32]** %str
  %idx = getelementptr [0 x i32], [0 x i32]* %0, i64 0, i64 %i3
  %idx4 = load i32, i32* %idx
  %1 = icmp ne i32 %idx4, 0
  br i1 %1, label %loop, label %end

loop:                                             ; preds = %while
  %i5 = load i64, i64* %i
  %addtmp = add i64 %i5, 1
  store i64 %addtmp, i64* %i
  br label %while

end:                                              ; preds = %while
  %i6 = load i64, i64* %i
  ret i64 %i6
}

define void @HOTLoop2_Test() {
entry:
  %0 = call i64 @HOTLoop2_Len([0 x i32]* bitcast ([1 x i32]* @STRING_0 to [0 x i32]*))
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  %1 = call i64 @HOTLoop2_Len([0 x i32]* bitcast ([2 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Int(i64 %1, i64 0)
  call void @Out_Ln()
  %2 = call i64 @HOTLoop2_Len([0 x i32]* bitcast ([4 x i32]* @STRING_2 to [0 x i32]*))
  call void @Out_Int(i64 %2, i64 0)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @HOTLoop2_Test()
  ret i64 0
}
