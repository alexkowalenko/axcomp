; ModuleID = 'Record3'
source_filename = "Record3"

%R = type { i64, i64 }
%R.0 = type { i64, i64 }
%R.1 = type { i64, i64 }
%R.2 = type { i64, i64 }

@Record3_r = internal global %R zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal void @Record3_Set(%R.1 %r, i64 %a, i64 %b) {
entry:
  %b3 = alloca i64
  %a2 = alloca i64
  %r1 = alloca %R.2
  store %R.1 %r, %R.2* %r1
  store i64 %a, i64* %a2
  store i64 %b, i64* %b3
  %a4 = load i64, i64* %a2
  %idx = getelementptr %R.2, %R.2* %r1, i64 0, i32 0
  store i64 %a4, i64* %idx
  %b5 = load i64, i64* %b3
  %idx6 = getelementptr %R.2, %R.2* %r1, i64 0, i32 1
  store i64 %b5, i64* %idx6
  ret void
}

define void @Record3_Test() {
entry:
  store i64 1, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 0)
  store i64 2, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 1)
  %r = load %R, %R* @Record3_r
  %idx = load i64, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx, i64 2)
  %r1 = load %R, %R* @Record3_r
  %idx2 = load i64, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 1)
  call void @Out_Int(i64 %idx2, i64 2)
  call void @Out_Ln()
  %r3 = load %R, %R* @Record3_r
  call void @Record3_Set(%R %r3, i64 3, i64 4)
  %r4 = load %R, %R* @Record3_r
  %idx5 = load i64, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx5, i64 2)
  %r6 = load %R, %R* @Record3_r
  %idx7 = load i64, i64* getelementptr inbounds (%R, %R* @Record3_r, i64 0, i32 1)
  call void @Out_Int(i64 %idx7, i64 2)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @Record3_Test()
  ret i64 0
}
