; ModuleID = 'Undef16'
source_filename = "Undef16"

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define i64 @Undef16_P() {
entry:
  %closure_struct1 = alloca [1 x i64*]
  %closure_struct = alloca [1 x i64*]
  %x = alloca i64
  %y = alloca i64
  store i64 0, i64* %y
  store i64 0, i64* %x
  %cls = getelementptr [1 x i64*], [1 x i64*]* %closure_struct, i64 0, i64 0
  store i64* %x, i64** %cls
  %0 = call i64 @Undef16_P_N([1 x i64*]* nest %closure_struct)
  store i64 %0, i64* %y
  store i64 1, i64* %x
  %cls2 = getelementptr [1 x i64*], [1 x i64*]* %closure_struct1, i64 0, i64 0
  store i64* %x, i64** %cls2
  %1 = call i64 @Undef16_P_N([1 x i64*]* nest %closure_struct1)
  ret i64 %1
}

define internal i64 @Undef16_P_N([1 x i64*]* nest %0) {
entry:
  %x = getelementptr [1 x i64*], [1 x i64*]* %0, i64 0, i64 0
  %x1 = load i64*, i64** %x
  %x2 = load i64, i64* %x1
  ret i64 %x2
}

define i64 @output() {
entry:
  %0 = call i64 @Undef16_P()
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  ret i64 0
}
