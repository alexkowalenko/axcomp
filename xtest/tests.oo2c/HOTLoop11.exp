; ModuleID = 'HOTLoop11'
source_filename = "HOTLoop11"

@HOTLoop11_g = internal global i64 0
@HOTLoop11_a = internal global [1 x i64] zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal i64 @HOTLoop11_P(i64 %x1) {
entry:
  %cont = alloca i1
  %x = alloca i64
  store i64 %x1, i64* %x
  store i1 false, i1* %cont
  store i1 true, i1* %cont
  br label %loop

loop:                                             ; preds = %ifcont, %entry
  %cont2 = load i1, i1* %cont
  br i1 %cont2, label %then, label %else

then:                                             ; preds = %loop
  %x3 = load i64, i64* %x
  %multmp = mul i64 %x3, 12
  store i64 %multmp, i64* @HOTLoop11_g
  store i1 false, i1* %cont
  br label %ifcont

else:                                             ; preds = %loop
  br label %end

ifcont:                                           ; preds = %then
  br label %loop

end:                                              ; preds = %else
  %a = load [1 x i64], [1 x i64]* @HOTLoop11_a
  %idx = load i64, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @HOTLoop11_a, i64 0, i64 0)
  ret i64 %idx
}

define void @HOTLoop11_Test() {
entry:
  store i64 123, i64* getelementptr inbounds ([1 x i64], [1 x i64]* @HOTLoop11_a, i64 0, i64 0)
  %0 = call i64 @HOTLoop11_P(i64 0)
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @HOTLoop11_Test()
  ret i64 0
}
