; ModuleID = 'Swap1'
source_filename = "Swap1"

@Swap1_x = internal global i64 0
@Swap1_y = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal void @Swap1_Swap() {
entry:
  %h = alloca i64
  store i64 0, i64* %h
  %x = load i64, i64* @Swap1_x
  store i64 %x, i64* %h
  %y = load i64, i64* @Swap1_y
  store i64 %y, i64* @Swap1_x
  %h1 = load i64, i64* %h
  store i64 %h1, i64* @Swap1_y
  ret void
}

define void @Swap1_Test() {
entry:
  store i64 1, i64* @Swap1_x
  store i64 2, i64* @Swap1_y
  call void @Swap1_Swap()
  %x = load i64, i64* @Swap1_x
  call void @Out_Int(i64 %x, i64 2)
  %y = load i64, i64* @Swap1_y
  call void @Out_Int(i64 %y, i64 2)
  call void @Out_Ln()
  call void @Swap1_Swap()
  %x1 = load i64, i64* @Swap1_x
  call void @Out_Int(i64 %x1, i64 2)
  %y2 = load i64, i64* @Swap1_y
  call void @Out_Int(i64 %y2, i64 2)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @Swap1_Test()
  ret i64 0
}
