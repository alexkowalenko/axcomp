; ModuleID = 'And1'
source_filename = "And1"

@STRING_0 = private global [16 x i32] [i32 70, i32 65, i32 76, i32 83, i32 69, i32 32, i32 38, i32 32, i32 70, i32 65, i32 76, i32 83, i32 69, i32 58, i32 32, i32 0]
@STRING_1 = private global [16 x i32] [i32 70, i32 65, i32 76, i32 83, i32 69, i32 32, i32 38, i32 32, i32 84, i32 82, i32 85, i32 69, i32 32, i32 58, i32 32, i32 0]
@STRING_2 = private global [16 x i32] [i32 84, i32 82, i32 85, i32 69, i32 32, i32 38, i32 32, i32 70, i32 65, i32 76, i32 83, i32 69, i32 32, i32 58, i32 32, i32 0]
@STRING_3 = private global [16 x i32] [i32 84, i32 82, i32 85, i32 69, i32 32, i32 38, i32 32, i32 84, i32 82, i32 85, i32 69, i32 32, i32 32, i32 58, i32 32, i32 0]

declare void @Out_Ln()

declare void @Out_Bool(i1)

declare void @Out_Char(i32)

declare void @Out_String([0 x i32]*)

define internal i1 @And1_P(i32 %c, i1 %x) {
entry:
  %x2 = alloca i1
  %c1 = alloca i32
  store i32 %c, i32* %c1
  store i1 %x, i1* %x2
  %c3 = load i32, i32* %c1
  call void @Out_Char(i32 %c3)
  %x4 = load i1, i1* %x2
  ret i1 %x4
}

define void @And1_Test() {
entry:
  call void @Out_String([0 x i32]* bitcast ([16 x i32]* @STRING_0 to [0 x i32]*))
  %0 = call i1 @And1_P(i32 97, i1 false)
  br i1 %0, label %and_next, label %and_end

and_next:                                         ; preds = %entry
  %1 = call i1 @And1_P(i32 98, i1 false)
  br label %and_end

and_end:                                          ; preds = %and_next, %entry
  %and = phi i1 [ %0, %entry ], [ %1, %and_next ]
  call void @Out_Bool(i1 %and)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([16 x i32]* @STRING_1 to [0 x i32]*))
  %2 = call i1 @And1_P(i32 97, i1 false)
  br i1 %2, label %and_next1, label %and_end2

and_next1:                                        ; preds = %and_end
  %3 = call i1 @And1_P(i32 98, i1 true)
  br label %and_end2

and_end2:                                         ; preds = %and_next1, %and_end
  %and3 = phi i1 [ %2, %and_end ], [ %3, %and_next1 ]
  call void @Out_Bool(i1 %and3)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([16 x i32]* @STRING_2 to [0 x i32]*))
  %4 = call i1 @And1_P(i32 97, i1 true)
  br i1 %4, label %and_next4, label %and_end5

and_next4:                                        ; preds = %and_end2
  %5 = call i1 @And1_P(i32 98, i1 false)
  br label %and_end5

and_end5:                                         ; preds = %and_next4, %and_end2
  %and6 = phi i1 [ %4, %and_end2 ], [ %5, %and_next4 ]
  call void @Out_Bool(i1 %and6)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([16 x i32]* @STRING_3 to [0 x i32]*))
  %6 = call i1 @And1_P(i32 97, i1 true)
  br i1 %6, label %and_next7, label %and_end8

and_next7:                                        ; preds = %and_end5
  %7 = call i1 @And1_P(i32 98, i1 true)
  br label %and_end8

and_end8:                                         ; preds = %and_next7, %and_end5
  %and9 = phi i1 [ %6, %and_end5 ], [ %7, %and_next7 ]
  call void @Out_Bool(i1 %and9)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @And1_Test()
  ret i64 0
}
