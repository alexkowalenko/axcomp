; ModuleID = 'Const8'
source_filename = "Const8"

@STRING_0 = private global [6 x i32] [i32 84, i32 82, i32 85, i32 69, i32 32, i32 0]
@STRING_1 = private global [7 x i32] [i32 70, i32 65, i32 76, i32 83, i32 69, i32 32, i32 0]

declare void @Out_Ln()

declare void @Out_String([0 x i32]*)

define internal void @Const8_Tand(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  %b2 = load i1, i1* %b1
  %modtmp = and i1 true, %b2
  br i1 %modtmp, label %then, label %else

then:                                             ; preds = %entry
  call void @Out_String([0 x i32]* bitcast ([6 x i32]* @STRING_0 to [0 x i32]*))
  br label %ifcont

else:                                             ; preds = %entry
  call void @Out_String([0 x i32]* bitcast ([7 x i32]* @STRING_1 to [0 x i32]*))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret void
}

define internal void @Const8_Fand(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  %b2 = load i1, i1* %b1
  %modtmp = and i1 false, %b2
  br i1 %modtmp, label %then, label %else

then:                                             ; preds = %entry
  call void @Out_String([0 x i32]* bitcast ([6 x i32]* @STRING_0 to [0 x i32]*))
  br label %ifcont

else:                                             ; preds = %entry
  call void @Out_String([0 x i32]* bitcast ([7 x i32]* @STRING_1 to [0 x i32]*))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret void
}

define internal void @Const8_Tor(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  br i1 true, label %or_end, label %or_next

or_next:                                          ; preds = %entry
  %b2 = load i1, i1* %b1
  br label %or_end

or_end:                                           ; preds = %or_next, %entry
  %or = phi i1 [ true, %entry ], [ %b2, %or_next ]
  br i1 %or, label %then, label %else

then:                                             ; preds = %or_end
  call void @Out_String([0 x i32]* bitcast ([6 x i32]* @STRING_0 to [0 x i32]*))
  br label %ifcont

else:                                             ; preds = %or_end
  call void @Out_String([0 x i32]* bitcast ([7 x i32]* @STRING_1 to [0 x i32]*))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret void
}

define internal void @Const8_For(i1 %b) {
entry:
  %b1 = alloca i1
  store i1 %b, i1* %b1
  br i1 false, label %or_end, label %or_next

or_next:                                          ; preds = %entry
  %b2 = load i1, i1* %b1
  br label %or_end

or_end:                                           ; preds = %or_next, %entry
  %or = phi i1 [ false, %entry ], [ %b2, %or_next ]
  br i1 %or, label %then, label %else

then:                                             ; preds = %or_end
  call void @Out_String([0 x i32]* bitcast ([6 x i32]* @STRING_0 to [0 x i32]*))
  br label %ifcont

else:                                             ; preds = %or_end
  call void @Out_String([0 x i32]* bitcast ([7 x i32]* @STRING_1 to [0 x i32]*))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret void
}

define void @Const8_Test() {
entry:
  call void @Const8_Tand(i1 true)
  call void @Const8_Tand(i1 false)
  call void @Out_Ln()
  call void @Const8_Fand(i1 true)
  call void @Const8_Fand(i1 false)
  call void @Out_Ln()
  call void @Const8_Tor(i1 true)
  call void @Const8_Tor(i1 false)
  call void @Out_Ln()
  call void @Const8_For(i1 true)
  call void @Const8_For(i1 false)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @Const8_Test()
  ret i64 0
}
