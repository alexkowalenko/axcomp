; ModuleID = 'Record5'
source_filename = "Record5"

%R = type { i64, i64 }

@Record5_r = internal global %R zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal void @Record5_Set(%R* %r1, i64 %a2, i64 %b3) {
entry:
  %b = alloca i64
  %a = alloca i64
  %r = alloca %R*
  store %R* %r1, %R** %r
  store i64 %a2, i64* %a
  store i64 %b3, i64* %b
  %a4 = load i64, i64* %a
  %r5 = load %R*, %R** %r
  %r6 = load %R*, %R** %r
  %r7 = load %R*, %R** %r
  %0 = load %R*, %R** %r
  %idx = getelementptr %R, %R* %0, i64 0, i32 0
  store i64 %a4, i64* %idx
  %b8 = load i64, i64* %b
  %r9 = load %R*, %R** %r
  %r10 = load %R*, %R** %r
  %r11 = load %R*, %R** %r
  %1 = load %R*, %R** %r
  %idx12 = getelementptr %R, %R* %1, i64 0, i32 1
  store i64 %b8, i64* %idx12
  ret void
}

define void @Record5_Test() {
entry:
  store i64 1, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 0)
  store i64 2, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 1)
  %r = load %R, %R* @Record5_r
  %idx = load i64, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx, i64 2)
  %r1 = load %R, %R* @Record5_r
  %idx2 = load i64, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 1)
  call void @Out_Int(i64 %idx2, i64 2)
  call void @Out_Ln()
  call void @Record5_Set(%R* @Record5_r, i64 3, i64 4)
  %r3 = load %R, %R* @Record5_r
  %idx4 = load i64, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 0)
  call void @Out_Int(i64 %idx4, i64 2)
  %r5 = load %R, %R* @Record5_r
  %idx6 = load i64, i64* getelementptr inbounds (%R, %R* @Record5_r, i64 0, i32 1)
  call void @Out_Int(i64 %idx6, i64 2)
  call void @Out_Ln()
  ret void
}

define i64 @output() {
entry:
  call void @Record5_Test()
  ret i64 0
}
