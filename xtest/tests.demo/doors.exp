; ModuleID = 'Doors'
source_filename = "Doors"

@Doors_N = internal constant i64 100
@Doors_len = internal constant i64 101
@Doors_i = internal global i64 0
@Doors_j = internal global i64 0
@Doors_closed = internal global [101 x i1] zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  %i44 = alloca i64
  %i25 = alloca i64
  %i7 = alloca i64
  %i = alloca i64
  store i64 1, i64* %i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i1 = load i64, i64* %i
  %idx = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i1
  store i1 true, i1* %idx
  %0 = load i64, i64* %i
  %nextvar = add i64 %0, 1
  store i64 %nextvar, i64* %i
  %N = load i64, i64* @Doors_N
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, %N
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond2 = icmp sge i64 %nextvar, %N
  br i1 %loopcond2, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 1, i64* %i7
  br label %loop3

loop3:                                            ; preds = %forneg5, %forpos4, %afterloop
  store i64 1, i64* @Doors_j
  br label %while

forpos4:                                          ; preds = %end
  %loopcond19 = icmp sle i64 %nextvar17, %N18
  br i1 %loopcond19, label %loop3, label %afterloop6

forneg5:                                          ; preds = %end
  %loopcond20 = icmp sge i64 %nextvar17, %N18
  br i1 %loopcond20, label %loop3, label %afterloop6

afterloop6:                                       ; preds = %forneg5, %forpos4
  store i64 1, i64* %i25
  br label %loop21

while:                                            ; preds = %ifcont, %loop3
  %j = load i64, i64* @Doors_j
  %len = load i64, i64* @Doors_len
  %1 = icmp slt i64 %j, %len
  br i1 %1, label %loop8, label %end

loop8:                                            ; preds = %while
  %j9 = load i64, i64* @Doors_j
  %i10 = load i64, i64* %i7
  %modtmp = srem i64 %j9, %i10
  %2 = icmp eq i64 %modtmp, 0
  br i1 %2, label %then, label %ifcont

then:                                             ; preds = %loop8
  %closed = load [101 x i1], [101 x i1]* @Doors_closed
  %j11 = load i64, i64* @Doors_j
  %idx12 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %j11
  %idx13 = load i1, i1* %idx12
  %3 = xor i1 %idx13, true
  %j14 = load i64, i64* @Doors_j
  %idx15 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %j14
  store i1 %3, i1* %idx15
  br label %ifcont

ifcont:                                           ; preds = %then, %loop8
  %j16 = load i64, i64* @Doors_j
  %addtmp = add i64 %j16, 1
  store i64 %addtmp, i64* @Doors_j
  br label %while

end:                                              ; preds = %while
  %4 = load i64, i64* %i7
  %nextvar17 = add i64 %4, 1
  store i64 %nextvar17, i64* %i7
  %N18 = load i64, i64* @Doors_N
  br i1 true, label %forpos4, label %forneg5

loop21:                                           ; preds = %forneg23, %forpos22, %afterloop6
  %i26 = load i64, i64* %i25
  %subtmp = sub i64 %i26, 1
  %modtmp27 = srem i64 %subtmp, 10
  %5 = icmp eq i64 %modtmp27, 0
  br i1 %5, label %then28, label %ifcont29

forpos22:                                         ; preds = %ifcont35
  %loopcond38 = icmp sle i64 %nextvar36, %N37
  br i1 %loopcond38, label %loop21, label %afterloop24

forneg23:                                         ; preds = %ifcont35
  %loopcond39 = icmp sge i64 %nextvar36, %N37
  br i1 %loopcond39, label %loop21, label %afterloop24

afterloop24:                                      ; preds = %forneg23, %forpos22
  call void @Out_Ln()
  store i64 1, i64* %i44
  br label %loop40

then28:                                           ; preds = %loop21
  call void @Out_Ln()
  br label %ifcont29

ifcont29:                                         ; preds = %then28, %loop21
  %closed30 = load [101 x i1], [101 x i1]* @Doors_closed
  %i31 = load i64, i64* %i25
  %idx32 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i31
  %idx33 = load i1, i1* %idx32
  br i1 %idx33, label %then34, label %else

then34:                                           ; preds = %ifcont29
  call void @Out_Char(i32 45)
  call void @Out_Char(i32 32)
  br label %ifcont35

else:                                             ; preds = %ifcont29
  call void @Out_Char(i32 43)
  call void @Out_Char(i32 32)
  br label %ifcont35

ifcont35:                                         ; preds = %else, %then34
  %6 = load i64, i64* %i25
  %nextvar36 = add i64 %6, 1
  store i64 %nextvar36, i64* %i25
  %N37 = load i64, i64* @Doors_N
  br i1 true, label %forpos22, label %forneg23

loop40:                                           ; preds = %forneg42, %forpos41, %afterloop24
  %closed45 = load [101 x i1], [101 x i1]* @Doors_closed
  %i46 = load i64, i64* %i44
  %idx47 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i46
  %idx48 = load i1, i1* %idx47
  %7 = xor i1 %idx48, true
  br i1 %7, label %then49, label %ifcont51

forpos41:                                         ; preds = %ifcont51
  %loopcond54 = icmp sle i64 %nextvar52, %N53
  br i1 %loopcond54, label %loop40, label %afterloop43

forneg42:                                         ; preds = %ifcont51
  %loopcond55 = icmp sge i64 %nextvar52, %N53
  br i1 %loopcond55, label %loop40, label %afterloop43

afterloop43:                                      ; preds = %forneg42, %forpos41
  call void @Out_Ln()
  ret i64 0

then49:                                           ; preds = %loop40
  %i50 = load i64, i64* %i44
  call void @Out_Int(i64 %i50, i64 0)
  call void @Out_Char(i32 32)
  br label %ifcont51

ifcont51:                                         ; preds = %then49, %loop40
  %8 = load i64, i64* %i44
  %nextvar52 = add i64 %8, 1
  store i64 %nextvar52, i64* %i44
  %N53 = load i64, i64* @Doors_N
  br i1 true, label %forpos41, label %forneg42
}
