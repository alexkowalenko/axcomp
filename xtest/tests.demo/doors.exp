; ModuleID = 'Doors'
source_filename = "Doors"

@Doors_N = internal constant i64 100
@Doors_len = internal constant i64 101
@Doors_i = internal global i64 0
@Doors_j = internal global i64 0
@Doors_closed = internal global [101 x i1] zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  %i35 = alloca i64
  %i19 = alloca i64
  %i4 = alloca i64
  %i = alloca i64
  store i64 1, i64* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i1 = load i64, i64* %i
  %idx = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i1
  store i1 true, i1* %idx
  %0 = load i64, i64* %i
  %nextvar = add i64 %0, 1
  store i64 %nextvar, i64* %i
  %N = load i64, i64* @Doors_N
  %loopcond = icmp sle i64 %nextvar, %N
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  store i64 1, i64* %i4
  br label %loop2

loop2:                                            ; preds = %end, %afterloop
  store i64 1, i64* @Doors_j
  br label %while

afterloop3:                                       ; preds = %end
  store i64 1, i64* %i19
  br label %loop17

while:                                            ; preds = %ifcont, %loop2
  %j = load i64, i64* @Doors_j
  %len = load i64, i64* @Doors_len
  %1 = icmp slt i64 %j, %len
  br i1 %1, label %loop5, label %end

loop5:                                            ; preds = %while
  %j6 = load i64, i64* @Doors_j
  %i7 = load i64, i64* %i4
  %modtmp = srem i64 %j6, %i7
  %2 = icmp eq i64 %modtmp, 0
  br i1 %2, label %then, label %ifcont

then:                                             ; preds = %loop5
  %closed = load [101 x i1], [101 x i1]* @Doors_closed
  %j8 = load i64, i64* @Doors_j
  %idx9 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %j8
  %idx10 = load i1, i1* %idx9
  %3 = xor i1 %idx10, true
  %j11 = load i64, i64* @Doors_j
  %idx12 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %j11
  store i1 %3, i1* %idx12
  br label %ifcont

ifcont:                                           ; preds = %then, %loop5
  %j13 = load i64, i64* @Doors_j
  %addtmp = add i64 %j13, 1
  store i64 %addtmp, i64* @Doors_j
  br label %while

end:                                              ; preds = %while
  %4 = load i64, i64* %i4
  %nextvar14 = add i64 %4, 1
  store i64 %nextvar14, i64* %i4
  %N15 = load i64, i64* @Doors_N
  %loopcond16 = icmp sle i64 %nextvar14, %N15
  br i1 %loopcond16, label %loop2, label %afterloop3

loop17:                                           ; preds = %ifcont29, %afterloop3
  %i20 = load i64, i64* %i19
  %subtmp = sub i64 %i20, 1
  %modtmp21 = srem i64 %subtmp, 10
  %5 = icmp eq i64 %modtmp21, 0
  br i1 %5, label %then22, label %ifcont23

afterloop18:                                      ; preds = %ifcont29
  call void @Out_Ln()
  store i64 1, i64* %i35
  br label %loop33

then22:                                           ; preds = %loop17
  call void @Out_Ln()
  br label %ifcont23

ifcont23:                                         ; preds = %then22, %loop17
  %closed24 = load [101 x i1], [101 x i1]* @Doors_closed
  %i25 = load i64, i64* %i19
  %idx26 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i25
  %idx27 = load i1, i1* %idx26
  br i1 %idx27, label %then28, label %else

then28:                                           ; preds = %ifcont23
  call void @Out_Char(i32 45)
  call void @Out_Char(i32 32)
  br label %ifcont29

else:                                             ; preds = %ifcont23
  call void @Out_Char(i32 43)
  call void @Out_Char(i32 32)
  br label %ifcont29

ifcont29:                                         ; preds = %else, %then28
  %6 = load i64, i64* %i19
  %nextvar30 = add i64 %6, 1
  store i64 %nextvar30, i64* %i19
  %N31 = load i64, i64* @Doors_N
  %loopcond32 = icmp sle i64 %nextvar30, %N31
  br i1 %loopcond32, label %loop17, label %afterloop18

loop33:                                           ; preds = %ifcont42, %afterloop18
  %closed36 = load [101 x i1], [101 x i1]* @Doors_closed
  %i37 = load i64, i64* %i35
  %idx38 = getelementptr [101 x i1], [101 x i1]* @Doors_closed, i64 0, i64 %i37
  %idx39 = load i1, i1* %idx38
  %7 = xor i1 %idx39, true
  br i1 %7, label %then40, label %ifcont42

afterloop34:                                      ; preds = %ifcont42
  call void @Out_Ln()
  ret i64 0

then40:                                           ; preds = %loop33
  %i41 = load i64, i64* %i35
  call void @Out_Int(i64 %i41, i64 0)
  call void @Out_Char(i32 32)
  br label %ifcont42

ifcont42:                                         ; preds = %then40, %loop33
  %8 = load i64, i64* %i35
  %nextvar43 = add i64 %8, 1
  store i64 %nextvar43, i64* %i35
  %N44 = load i64, i64* @Doors_N
  %loopcond45 = icmp sle i64 %nextvar43, %N44
  br i1 %loopcond45, label %loop33, label %afterloop34
}
