; ModuleID = 'MagicSquares'
source_filename = "MagicSquares"

@MagicSquares_count = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define internal void @MagicSquares_Generate(i64 %n) {
entry:
  %M = alloca [13 x [13 x i64]]
  %nsq = alloca i64
  %nx = alloca i64
  %x = alloca i64
  %j = alloca i64
  %i = alloca i64
  %n1 = alloca i64
  store i64 %n, i64* %n1
  store i64 0, i64* %i
  store i64 0, i64* %j
  store i64 0, i64* %x
  store i64 0, i64* %nx
  store i64 0, i64* %nsq
  store [13 x [13 x i64]] zeroinitializer, [13 x [13 x i64]]* %M
  %n2 = load i64, i64* %n1
  %n3 = load i64, i64* %n1
  %multmp = mul i64 %n2, %n3
  store i64 %multmp, i64* %nsq
  store i64 0, i64* %x
  %n4 = load i64, i64* %n1
  %divtmp = sdiv i64 %n4, 2
  store i64 %divtmp, i64* %i
  %n5 = load i64, i64* %n1
  %subtmp = sub i64 %n5, 1
  store i64 %subtmp, i64* %j
  br label %while

while:                                            ; preds = %end, %entry
  %x6 = load i64, i64* %x
  %nsq7 = load i64, i64* %nsq
  %0 = icmp slt i64 %x6, %nsq7
  br i1 %0, label %loop, label %end36

loop:                                             ; preds = %while
  %n8 = load i64, i64* %n1
  %x9 = load i64, i64* %x
  %addtmp = add i64 %n8, %x9
  store i64 %addtmp, i64* %nx
  %j10 = load i64, i64* %j
  %subtmp11 = sub i64 %j10, 1
  %n12 = load i64, i64* %n1
  %modtmp = srem i64 %subtmp11, %n12
  store i64 %modtmp, i64* %j
  %x13 = load i64, i64* %x
  %addtmp14 = add i64 %x13, 1
  store i64 %addtmp14, i64* %x
  %x15 = load i64, i64* %x
  %j16 = load i64, i64* %j
  %i17 = load i64, i64* %i
  %idx = getelementptr [13 x [13 x i64]], [13 x [13 x i64]]* %M, i64 0, i64 %j16, i64 %i17
  store i64 %x15, i64* %idx
  br label %while18

while18:                                          ; preds = %loop21, %loop
  %x19 = load i64, i64* %x
  %nx20 = load i64, i64* %nx
  %1 = icmp slt i64 %x19, %nx20
  br i1 %1, label %loop21, label %end

loop21:                                           ; preds = %while18
  %i22 = load i64, i64* %i
  %addtmp23 = add i64 %i22, 1
  %n24 = load i64, i64* %n1
  %modtmp25 = srem i64 %addtmp23, %n24
  store i64 %modtmp25, i64* %i
  %j26 = load i64, i64* %j
  %addtmp27 = add i64 %j26, 1
  %n28 = load i64, i64* %n1
  %modtmp29 = srem i64 %addtmp27, %n28
  store i64 %modtmp29, i64* %j
  %x30 = load i64, i64* %x
  %addtmp31 = add i64 %x30, 1
  store i64 %addtmp31, i64* %x
  %x32 = load i64, i64* %x
  %j33 = load i64, i64* %j
  %i34 = load i64, i64* %i
  %idx35 = getelementptr [13 x [13 x i64]], [13 x [13 x i64]]* %M, i64 0, i64 %j33, i64 %i34
  store i64 %x32, i64* %idx35
  br label %while18

end:                                              ; preds = %while18
  br label %while

end36:                                            ; preds = %while
  store i64 0, i64* %i
  br label %repeat

repeat:                                           ; preds = %end47, %end36
  store i64 0, i64* %j
  br label %repeat37

repeat37:                                         ; preds = %repeat37, %repeat
  %M38 = load [13 x [13 x i64]], [13 x [13 x i64]]* %M
  %j39 = load i64, i64* %j
  %i40 = load i64, i64* %i
  %idx41 = getelementptr [13 x [13 x i64]], [13 x [13 x i64]]* %M, i64 0, i64 %j39, i64 %i40
  %idx42 = load i64, i64* %idx41
  call void @Out_Int(i64 %idx42, i64 2)
  call void @Out_Char(i32 32)
  %j43 = load i64, i64* %j
  %addtmp44 = add i64 %j43, 1
  store i64 %addtmp44, i64* %j
  %j45 = load i64, i64* %j
  %n46 = load i64, i64* %n1
  %2 = icmp eq i64 %j45, %n46
  br i1 %2, label %end47, label %repeat37

end47:                                            ; preds = %repeat37
  call void @Out_Ln()
  %i48 = load i64, i64* %i
  %addtmp49 = add i64 %i48, 1
  store i64 %addtmp49, i64* %i
  %i50 = load i64, i64* %i
  %n51 = load i64, i64* %n1
  %3 = icmp eq i64 %i50, %n51
  br i1 %3, label %end52, label %repeat

end52:                                            ; preds = %end47
  ret void
}

define i64 @output() {
entry:
  store i64 3, i64* @MagicSquares_count
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %count = load i64, i64* @MagicSquares_count
  call void @MagicSquares_Generate(i64 %count)
  call void @Out_Ln()
  %index = load i64, i64* @MagicSquares_count
  %nextvar = add i64 %index, 2
  store i64 %nextvar, i64* @MagicSquares_count
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 9
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond1 = icmp sge i64 %nextvar, 9
  br i1 %loopcond1, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0
}
