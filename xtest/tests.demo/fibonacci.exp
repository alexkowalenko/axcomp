; ModuleID = 'fibonacci'
source_filename = "fibonacci"

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define internal i64 @fibonacci_fibonacci(i64 %x1) {
entry:
  %x = alloca i64
  store i64 %x1, i64* %x
  %x2 = load i64, i64* %x
  %0 = icmp slt i64 %x2, 2
  br i1 %0, label %then, label %else

then:                                             ; preds = %entry
  %x3 = load i64, i64* %x
  ret i64 %x3

else:                                             ; preds = %entry
  %x4 = load i64, i64* %x
  %subtmp = sub i64 %x4, 1
  %1 = call i64 @fibonacci_fibonacci(i64 %subtmp)
  %x5 = load i64, i64* %x
  %subtmp6 = sub i64 %x5, 2
  %2 = call i64 @fibonacci_fibonacci(i64 %subtmp6)
  %addtmp = add i64 %1, %2
  ret i64 %addtmp

ifcont:                                           ; No predecessors!
  ret i64 %addtmp
}

define i64 @output() {
entry:
  %0 = call i64 @fibonacci_fibonacci(i64 35)
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  ret i64 0
}
