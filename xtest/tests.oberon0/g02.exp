; ModuleID = 'g02'
source_filename = "g02"

@x1 = internal global i64 0
@x2 = internal global [5 x i64] zeroinitializer
@x3 = internal global [6 x i1] zeroinitializer

declare void @WriteInt(i64)

declare void @WriteBoolean(i1)

declare void @WriteLn()

define i64 @f() {
entry:
  %z3 = alloca [6 x i1]
  %z2 = alloca [4 x i64]
  %z1 = alloca i64
  store i64 0, i64* %z1
  store [4 x i64] zeroinitializer, [4 x i64]* %z2
  store [6 x i1] zeroinitializer, [6 x i1]* %z3
  %z21 = load [4 x i64], [4 x i64]* %z2
  %idx = getelementptr [4 x i64], [4 x i64]* %z2, i64 0, i64 2
  %idx2 = load i64, i64* %idx
  ret i64 %idx2
}

define i64 @output() {
entry:
  %x2 = load [5 x i64], [5 x i64]* @x2
  %idx = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @x2, i64 0, i64 0)
  %x21 = load [5 x i64], [5 x i64]* @x2
  %idx2 = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @x2, i64 0, i64 1)
  %addtmp = add i64 %idx, %idx2
  %0 = call i64 @f()
  %addtmp3 = add i64 %addtmp, %0
  store i64 %addtmp3, i64* @x1
  %x24 = load [5 x i64], [5 x i64]* @x2
  %idx5 = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @x2, i64 0, i64 3)
  %x1 = load i64, i64* @x1
  %addtmp6 = add i64 %idx5, %x1
  ret i64 %addtmp6
}
