; ModuleID = 'g05'
source_filename = "g05"

@g05_a = internal global [3 x [3 x i64]] zeroinitializer
@g05_sum = internal global i64 0
@g05_x = internal global i64 0
@g05_y = internal global i64 0

declare void @WriteInt(i64)

declare void @WriteLn()

define i64 @output() {
entry:
  store i64 0, i64* @g05_y
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  store i64 0, i64* @g05_x
  br label %loop1

forpos:                                           ; preds = %afterloop4
  %loopcond10 = icmp sle i64 %nextvar9, 2
  br i1 %loopcond10, label %loop, label %afterloop

forneg:                                           ; preds = %afterloop4
  %loopcond11 = icmp sge i64 %nextvar9, 2
  br i1 %loopcond11, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 0, i64* @g05_y
  br label %loop12

loop1:                                            ; preds = %forneg3, %forpos2, %loop
  %x = load i64, i64* @g05_x
  %y = load i64, i64* @g05_y
  %addtmp = add i64 %x, %y
  %x5 = load i64, i64* @g05_x
  %y6 = load i64, i64* @g05_y
  %idx = getelementptr [3 x [3 x i64]], [3 x [3 x i64]]* @g05_a, i64 0, i64 %x5, i64 %y6
  store i64 %addtmp, i64* %idx
  %index = load i64, i64* @g05_x
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @g05_x
  br i1 true, label %forpos2, label %forneg3

forpos2:                                          ; preds = %loop1
  %loopcond = icmp sle i64 %nextvar, 2
  br i1 %loopcond, label %loop1, label %afterloop4

forneg3:                                          ; preds = %loop1
  %loopcond7 = icmp sge i64 %nextvar, 2
  br i1 %loopcond7, label %loop1, label %afterloop4

afterloop4:                                       ; preds = %forneg3, %forpos2
  %index8 = load i64, i64* @g05_y
  %nextvar9 = add i64 %index8, 1
  store i64 %nextvar9, i64* @g05_y
  br i1 true, label %forpos, label %forneg

loop12:                                           ; preds = %forneg14, %forpos13, %afterloop
  store i64 0, i64* @g05_x
  br label %loop16

forpos13:                                         ; preds = %afterloop19
  %loopcond31 = icmp sle i64 %nextvar30, 2
  br i1 %loopcond31, label %loop12, label %afterloop15

forneg14:                                         ; preds = %afterloop19
  %loopcond32 = icmp sge i64 %nextvar30, 2
  br i1 %loopcond32, label %loop12, label %afterloop15

afterloop15:                                      ; preds = %forneg14, %forpos13
  %sum33 = load i64, i64* @g05_sum
  call void @WriteInt(i64 %sum33)
  call void @WriteLn()
  ret i64 0

loop16:                                           ; preds = %forneg18, %forpos17, %loop12
  %a = load [3 x [3 x i64]], [3 x [3 x i64]]* @g05_a
  %x20 = load i64, i64* @g05_x
  %y21 = load i64, i64* @g05_y
  %idx22 = getelementptr [3 x [3 x i64]], [3 x [3 x i64]]* @g05_a, i64 0, i64 %x20, i64 %y21
  %idx23 = load i64, i64* %idx22
  call void @WriteInt(i64 %idx23)
  %sum = load i64, i64* @g05_sum
  %addtmp24 = add i64 %sum, 1
  store i64 %addtmp24, i64* @g05_sum
  %index25 = load i64, i64* @g05_x
  %nextvar26 = add i64 %index25, 1
  store i64 %nextvar26, i64* @g05_x
  br i1 true, label %forpos17, label %forneg18

forpos17:                                         ; preds = %loop16
  %loopcond27 = icmp sle i64 %nextvar26, 2
  br i1 %loopcond27, label %loop16, label %afterloop19

forneg18:                                         ; preds = %loop16
  %loopcond28 = icmp sge i64 %nextvar26, 2
  br i1 %loopcond28, label %loop16, label %afterloop19

afterloop19:                                      ; preds = %forneg18, %forpos17
  call void @WriteLn()
  %index29 = load i64, i64* @g05_y
  %nextvar30 = add i64 %index29, 1
  store i64 %nextvar30, i64* @g05_y
  br i1 true, label %forpos13, label %forneg14
}
