; ModuleID = 'g03'
source_filename = "g03"

@g03_x = internal global [3 x i64] zeroinitializer
@g03_i = internal global i64 0

declare void @WriteInt(i64)

declare void @WriteLn()

define i64 @output() {
entry:
  %i = alloca i64
  store i64 1, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 0)
  store i64 2, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 1)
  store i64 3, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 2)
  store i64 0, i64* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %x = load [3 x i64], [3 x i64]* @g03_x
  %i1 = load i64, i64* %i
  %idx = getelementptr [3 x i64], [3 x i64]* @g03_x, i64 0, i64 %i1
  %idx2 = load i64, i64* %idx
  call void @WriteInt(i64 %idx2)
  call void @WriteLn()
  %0 = load i64, i64* %i
  %nextvar = add i64 %0, 1
  store i64 %nextvar, i64* %i
  %loopcond = icmp sle i64 %nextvar, 2
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %x3 = load [3 x i64], [3 x i64]* @g03_x
  %idx4 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 0)
  %x5 = load [3 x i64], [3 x i64]* @g03_x
  %idx6 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 1)
  %addtmp = add i64 %idx4, %idx6
  %x7 = load [3 x i64], [3 x i64]* @g03_x
  %idx8 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]* @g03_x, i64 0, i64 2)
  %addtmp9 = add i64 %addtmp, %idx8
  ret i64 %addtmp9
}
