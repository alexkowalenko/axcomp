; ModuleID = 'g10'
source_filename = "g10"

%0 = type { i64, i64 }

@g10_pt = internal global [3 x %0] zeroinitializer
@g10_i = internal global i64 0

define i64 @output() {
entry:
  store i64 0, i64* @g10_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @g10_i
  %i1 = load i64, i64* @g10_i
  %idx = getelementptr [3 x %0], [3 x %0]* @g10_pt, i64 0, i64 %i1, i32 0
  store i64 %i, i64* %idx
  %i2 = load i64, i64* @g10_i
  %multmp = mul i64 %i2, 3
  %i3 = load i64, i64* @g10_i
  %idx4 = getelementptr [3 x %0], [3 x %0]* @g10_pt, i64 0, i64 %i3, i32 1
  store i64 %multmp, i64* %idx4
  %index = load i64, i64* @g10_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @g10_i
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 2
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond5 = icmp sge i64 %nextvar, 2
  br i1 %loopcond5, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  %pt = load [3 x %0], [3 x %0]* @g10_pt
  %idx6 = load i64, i64* getelementptr inbounds ([3 x %0], [3 x %0]* @g10_pt, i64 0, i64 1, i32 0)
  %pt7 = load [3 x %0], [3 x %0]* @g10_pt
  %idx8 = load i64, i64* getelementptr inbounds ([3 x %0], [3 x %0]* @g10_pt, i64 0, i64 1, i32 1)
  %addtmp = add i64 %idx6, %idx8
  ret i64 %addtmp
}
