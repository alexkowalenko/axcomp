; ModuleID = 'string5'
source_filename = "string5"

@string5_x = internal global [0 x i32]* null
@string5_i = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 72, i32 101, i32 108, i32 108, i32 111, i32 0]

declare void @Out_Ln()

declare void @Out_Char(i32)

define i64 @output() {
entry:
  store [0 x i32]* @STRING_0, [0 x i32]** @string5_x
  store i64 0, i64* @string5_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %x = load [0 x i32]*, [0 x i32]** @string5_x
  %i = load i64, i64* @string5_i
  %0 = load [0 x i32]*, [0 x i32]** @string5_x
  %idx = getelementptr [0 x i32], [0 x i32]* %0, i64 0, i64 %i
  %idx1 = load i32, i32* %idx
  call void @Out_Char(i32 %idx1)
  call void @Out_Char(i32 32)
  %index = load i64, i64* @string5_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @string5_i
  %x2 = load [0 x i32]*, [0 x i32]** @string5_x
  %1 = call i64 @Strings_Length([0 x i32]* %x2)
  %subtmp = sub i64 %1, 1
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, %subtmp
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond3 = icmp sge i64 %nextvar, %subtmp
  br i1 %loopcond3, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  call void @Out_Ln()
  ret i64 0
}

declare i64 @Strings_Length([0 x i32]*)
