; ModuleID = 'set5'
source_filename = "set5"

@set5_x = internal global i64 0
@set5_y = internal global i64 0
@set5_z = internal global i64 0
@STRING_0 = private global [6 x i32] [i32 85, i32 110, i32 105, i32 111, i32 110, i32 0]
@STRING_1 = private global [10 x i32] [i32 32, i32 105, i32 110, i32 32, i32 115, i32 101, i32 116, i32 32, i32 122, i32 0]
@STRING_2 = private global [13 x i32] [i32 73, i32 110, i32 116, i32 101, i32 114, i32 115, i32 101, i32 99, i32 116, i32 105, i32 111, i32 110, i32 0]
@STRING_3 = private global [21 x i32] [i32 83, i32 121, i32 109, i32 109, i32 101, i32 116, i32 114, i32 105, i32 99, i32 32, i32 100, i32 105, i32 102, i32 102, i32 101, i32 114, i32 101, i32 110, i32 99, i32 101, i32 0]
@STRING_4 = private global [11 x i32] [i32 68, i32 105, i32 102, i32 102, i32 101, i32 114, i32 101, i32 110, i32 99, i32 101, i32 0]
@STRING_5 = private global [8 x i32] [i32 70, i32 105, i32 110, i32 105, i32 115, i32 104, i32 33, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 8, i64* @set5_x
  store i64 16, i64* @set5_y
  call void @Out_String([0 x i32]* bitcast ([6 x i32]* @STRING_0 to [0 x i32]*))
  call void @Out_Ln()
  %x = load i64, i64* @set5_x
  %y = load i64, i64* @set5_y
  %setunion = or i64 %x, %y
  store i64 %setunion, i64* @set5_z
  %z = load i64, i64* @set5_z
  %0 = and i64 %z, 8
  %1 = icmp ugt i64 %0, 0
  br i1 %1, label %then, label %ifcont

then:                                             ; preds = %entry
  call void @Out_Int(i64 3, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont

ifcont:                                           ; preds = %then, %entry
  %z1 = load i64, i64* @set5_z
  %2 = and i64 %z1, 16
  %3 = icmp ugt i64 %2, 0
  br i1 %3, label %then2, label %ifcont3

then2:                                            ; preds = %ifcont
  call void @Out_Int(i64 4, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont3

ifcont3:                                          ; preds = %then2, %ifcont
  call void @Out_Ln()
  %4 = call i64 @Set_range(i64 0, i64 1, i64 2)
  store i64 %4, i64* @set5_x
  %5 = call i64 @Set_range(i64 0, i64 2, i64 3)
  store i64 %5, i64* @set5_y
  call void @Out_String([0 x i32]* bitcast ([13 x i32]* @STRING_2 to [0 x i32]*))
  call void @Out_Ln()
  %x4 = load i64, i64* @set5_x
  %y5 = load i64, i64* @set5_y
  %setintersect = and i64 %x4, %y5
  store i64 %setintersect, i64* @set5_z
  %z6 = load i64, i64* @set5_z
  %6 = and i64 %z6, 2
  %7 = icmp ugt i64 %6, 0
  br i1 %7, label %then7, label %ifcont8

then7:                                            ; preds = %ifcont3
  call void @Out_Int(i64 1, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont8

ifcont8:                                          ; preds = %then7, %ifcont3
  %z9 = load i64, i64* @set5_z
  %8 = and i64 %z9, 4
  %9 = icmp ugt i64 %8, 0
  br i1 %9, label %then10, label %ifcont11

then10:                                           ; preds = %ifcont8
  call void @Out_Int(i64 2, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont11

ifcont11:                                         ; preds = %then10, %ifcont8
  %z12 = load i64, i64* @set5_z
  %10 = and i64 %z12, 8
  %11 = icmp ugt i64 %10, 0
  br i1 %11, label %then13, label %ifcont14

then13:                                           ; preds = %ifcont11
  call void @Out_Int(i64 3, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont14

ifcont14:                                         ; preds = %then13, %ifcont11
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([21 x i32]* @STRING_3 to [0 x i32]*))
  call void @Out_Ln()
  %x15 = load i64, i64* @set5_x
  %y16 = load i64, i64* @set5_y
  %setsdiff = xor i64 %y16, -1
  %setsdiff17 = and i64 %x15, %setsdiff
  %setsdiff18 = xor i64 %x15, -1
  %setsdiff19 = and i64 %y16, %setsdiff18
  %setsdiff20 = or i64 %setsdiff17, %setsdiff19
  store i64 %setsdiff20, i64* @set5_z
  %z21 = load i64, i64* @set5_z
  %12 = and i64 %z21, 2
  %13 = icmp ugt i64 %12, 0
  br i1 %13, label %then22, label %ifcont23

then22:                                           ; preds = %ifcont14
  call void @Out_Int(i64 1, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont23

ifcont23:                                         ; preds = %then22, %ifcont14
  %z24 = load i64, i64* @set5_z
  %14 = and i64 %z24, 4
  %15 = icmp ugt i64 %14, 0
  br i1 %15, label %then25, label %ifcont26

then25:                                           ; preds = %ifcont23
  call void @Out_Int(i64 2, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont26

ifcont26:                                         ; preds = %then25, %ifcont23
  %z27 = load i64, i64* @set5_z
  %16 = and i64 %z27, 8
  %17 = icmp ugt i64 %16, 0
  br i1 %17, label %then28, label %ifcont29

then28:                                           ; preds = %ifcont26
  call void @Out_Int(i64 3, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont29

ifcont29:                                         ; preds = %then28, %ifcont26
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([11 x i32]* @STRING_4 to [0 x i32]*))
  call void @Out_Ln()
  %x30 = load i64, i64* @set5_x
  %y31 = load i64, i64* @set5_y
  %setdiff = xor i64 %y31, -1
  %setdiff32 = and i64 %x30, %setdiff
  store i64 %setdiff32, i64* @set5_z
  %z33 = load i64, i64* @set5_z
  %18 = and i64 %z33, 2
  %19 = icmp ugt i64 %18, 0
  br i1 %19, label %then34, label %ifcont35

then34:                                           ; preds = %ifcont29
  call void @Out_Int(i64 1, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont35

ifcont35:                                         ; preds = %then34, %ifcont29
  %z36 = load i64, i64* @set5_z
  %20 = and i64 %z36, 4
  %21 = icmp ugt i64 %20, 0
  br i1 %21, label %then37, label %ifcont38

then37:                                           ; preds = %ifcont35
  call void @Out_Int(i64 2, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont38

ifcont38:                                         ; preds = %then37, %ifcont35
  %z39 = load i64, i64* @set5_z
  %22 = and i64 %z39, 8
  %23 = icmp ugt i64 %22, 0
  br i1 %23, label %then40, label %ifcont41

then40:                                           ; preds = %ifcont38
  call void @Out_Int(i64 3, i64 0)
  call void @Out_String([0 x i32]* bitcast ([10 x i32]* @STRING_1 to [0 x i32]*))
  call void @Out_Ln()
  br label %ifcont41

ifcont41:                                         ; preds = %then40, %ifcont38
  call void @Out_Ln()
  call void @Out_String([0 x i32]* bitcast ([8 x i32]* @STRING_5 to [0 x i32]*))
  call void @Out_Ln()
  ret i64 0
}

declare i64 @Set_range(i64, i64, i64)
