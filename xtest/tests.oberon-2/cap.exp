; ModuleID = 'cap'
source_filename = "cap"

@cap_x = internal global i64 0

declare i32 @CAP(i32)

declare i32 @CHR(i64)

declare void @Out_Char(i32)

declare void @Out_Ln()

define i64 @output() {
entry:
  %i = alloca i64
  store i64 97, i64* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i1 = load i64, i64* %i
  %0 = call i32 @CHR(i64 %i1)
  call void @Out_Char(i32 %0)
  call void @Out_Char(i32 32)
  %i2 = load i64, i64* %i
  %1 = call i32 @CHR(i64 %i2)
  %2 = call i32 @CAP(i32 %1)
  call void @Out_Char(i32 %2)
  call void @Out_Ln()
  %3 = load i64, i64* %i
  %nextvar = add i64 %3, 1
  store i64 %nextvar, i64* %i
  %loopcond = icmp sle i64 %nextvar, 122
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  ret i64 0
}
