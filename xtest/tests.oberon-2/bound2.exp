; ModuleID = 'bound2'
source_filename = "bound2"

%pt = type { i64, i64 }
%pt3 = type { i64, i64, i64 }

@bound2_i = internal global %pt zeroinitializer
@bound2_j = internal global %pt3 zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define internal void @bound2_print(%pt %a) {
entry:
  %a1 = alloca %pt
  store %pt %a, %pt* %a1
  call void @Out_Char(i32 40)
  %a2 = load %pt, %pt* %a1
  %idx = getelementptr %pt, %pt* %a1, i64 0, i32 0
  %idx3 = load i64, i64* %idx
  call void @Out_Int(i64 %idx3, i64 0)
  call void @Out_Char(i32 44)
  %a4 = load %pt, %pt* %a1
  %idx5 = getelementptr %pt, %pt* %a1, i64 0, i32 1
  %idx6 = load i64, i64* %idx5
  call void @Out_Int(i64 %idx6, i64 0)
  call void @Out_Char(i32 41)
  ret void
}

define internal void @bound2_set(%pt* %a, i64 %x2, i64 %y3) {
entry:
  %y = alloca i64
  %x = alloca i64
  %a1 = alloca %pt*
  store %pt* %a, %pt** %a1
  store i64 %x2, i64* %x
  store i64 %y3, i64* %y
  %x4 = load i64, i64* %x
  %a5 = load %pt*, %pt** %a1
  %a6 = load %pt*, %pt** %a1
  %a7 = load %pt*, %pt** %a1
  %0 = load %pt*, %pt** %a1
  %idx = getelementptr %pt, %pt* %0, i64 0, i32 0
  store i64 %x4, i64* %idx
  %y8 = load i64, i64* %y
  %a9 = load %pt*, %pt** %a1
  %a10 = load %pt*, %pt** %a1
  %a11 = load %pt*, %pt** %a1
  %1 = load %pt*, %pt** %a1
  %idx12 = getelementptr %pt, %pt* %1, i64 0, i32 1
  store i64 %y8, i64* %idx12
  ret void
}

define i64 @output() {
entry:
  call void @bound2_set(%pt* @bound2_i, i64 3, i64 4)
  %0 = load %pt, %pt* @bound2_i
  call void @bound2_print(%pt %0)
  call void @Out_Ln()
  call void @bound2_set(%pt3* @bound2_j, i64 4, i64 3)
  store i64 5, i64* getelementptr inbounds (%pt3, %pt3* @bound2_j, i64 0, i32 2)
  %1 = load %pt3, %pt3* @bound2_j
  call void @bound2_print(%pt3 %1)
  call void @Out_Ln()
  %j = load %pt3, %pt3* @bound2_j
  %idx = load i64, i64* getelementptr inbounds (%pt3, %pt3* @bound2_j, i64 0, i32 2)
  call void @Out_Int(i64 %idx, i64 0)
  call void @Out_Ln()
  ret i64 0
}
