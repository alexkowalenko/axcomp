; ModuleID = 'case5'
source_filename = "case5"

@case5_i = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 65, i32 0]
@STRING_1 = private global [0 x i32] [i32 68, i32 45, i32 90, i32 0]

declare void @Out_Ln()

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 1, i64* @case5_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @case5_i
  switch i64 %i, label %case.range [
  ]

forpos:                                           ; preds = %case.end
  %loopcond = icmp sle i64 %nextvar, 5
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %case.end
  %loopcond1 = icmp sge i64 %nextvar, 5
  br i1 %loopcond1, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0

case.range:                                       ; preds = %loop
  br label %case.range0

case.range0:                                      ; preds = %case.range
  %0 = icmp sle i64 1, %i
  %1 = icmp sle i64 %i, 2
  %2 = and i1 %0, %1
  br i1 %2, label %case.element0, label %case.else

case.element0:                                    ; preds = %case.range0
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %case.end

case.else:                                        ; preds = %case.range0
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %case.end

case.end:                                         ; preds = %case.else, %case.element0
  %index = load i64, i64* @case5_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @case5_i
  br i1 true, label %forpos, label %forneg
}
