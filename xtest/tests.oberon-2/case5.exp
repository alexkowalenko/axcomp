; ModuleID = 'case5'
source_filename = "case5"

@case5_i = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 65, i32 0]
@STRING_1 = private global [0 x i32] [i32 68, i32 45, i32 90, i32 0]

declare void @Out_Ln()

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  %i = alloca i64
  store i64 1, i64* %i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i1 = load i64, i64* %i
  switch i64 %i1, label %range [
  ]

forpos:                                           ; preds = %case_end
  %loopcond = icmp sle i64 %nextvar, 5
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %case_end
  %loopcond2 = icmp sge i64 %nextvar, 5
  br i1 %loopcond2, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0

range:                                            ; preds = %loop
  br label %case.range0

case.range0:                                      ; preds = %range
  %0 = icmp sle i64 1, %i1
  %1 = icmp sle i64 %i1, 2
  %2 = and i1 %0, %1
  br i1 %2, label %case.element0, label %else

case.element0:                                    ; preds = %case.range0
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %case_end

else:                                             ; preds = %case.range0
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %case_end

case_end:                                         ; preds = %else, %case.element0
  %3 = load i64, i64* %i
  %nextvar = add i64 %3, 1
  store i64 %nextvar, i64* %i
  br i1 true, label %forpos, label %forneg
}
