; ModuleID = 'inc'
source_filename = "inc"

@inc_x = internal global i64 0
@inc_y = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 83, i32 97, i32 109, i32 101, i32 0]
@STRING_1 = private global [0 x i32] [i32 68, i32 105, i32 102, i32 102, i32 101, i32 114, i32 101, i32 110, i32 116, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 6, i64* @inc_x
  %x = load i64, i64* @inc_x
  store i64 %x, i64* @inc_y
  %0 = load i64, i64* @inc_x
  %inc = add i64 %0, 1
  store i64 %inc, i64* @inc_x
  %x1 = load i64, i64* @inc_x
  call void @Out_Int(i64 %x1)
  call void @Out_Ln()
  %1 = load i64, i64* @inc_x
  %dec = sub i64 %1, 1
  store i64 %dec, i64* @inc_x
  %x2 = load i64, i64* @inc_x
  call void @Out_Int(i64 %x2)
  call void @Out_Ln()
  %x3 = load i64, i64* @inc_x
  %y = load i64, i64* @inc_y
  %2 = icmp eq i64 %x3, %y
  br i1 %2, label %then, label %else

then:                                             ; preds = %entry
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %ifcont

else:                                             ; preds = %entry
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i64 0
}
