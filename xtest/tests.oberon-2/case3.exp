; ModuleID = 'case3'
source_filename = "case3"

@case3_c = internal global i32 0
@case3_i = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 65, i32 0]
@STRING_1 = private global [0 x i32] [i32 66, i32 0]
@STRING_2 = private global [0 x i32] [i32 67, i32 0]
@STRING_3 = private global [0 x i32] [i32 68, i32 45, i32 90, i32 0]

declare i32 @CHR(i64)

declare void @Out_Ln()

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 1, i64* @case3_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @case3_i
  %addtmp = add i64 64, %i
  %0 = call i32 @CHR(i64 %addtmp)
  store i32 %0, i32* @case3_c
  %c = load i32, i32* @case3_c
  switch i32 %c, label %case.range [
    i32 65, label %case.element0
    i32 66, label %case.element1
    i32 67, label %case.element2
  ]

forpos:                                           ; preds = %case.end
  %loopcond = icmp sle i64 %nextvar, 4
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %case.end
  %loopcond1 = icmp sge i64 %nextvar, 4
  br i1 %loopcond1, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0

case.range:                                       ; preds = %loop
  br label %case.else

case.element0:                                    ; preds = %loop
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %case.end

case.element1:                                    ; preds = %loop
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %case.end

case.element2:                                    ; preds = %loop
  call void @Out_String([0 x i32]* @STRING_2)
  call void @Out_Ln()
  br label %case.end

case.else:                                        ; preds = %case.range
  call void @Out_String([0 x i32]* @STRING_3)
  call void @Out_Ln()
  br label %case.end

case.end:                                         ; preds = %case.else, %case.element2, %case.element1, %case.element0
  %index = load i64, i64* @case3_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @case3_i
  br i1 true, label %forpos, label %forneg
}
