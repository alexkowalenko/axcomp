; ModuleID = 'len'
source_filename = "len"

@len_i = internal global i64 0
@len_y = internal global [7 x i64] zeroinitializer

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

define i64 @output() {
entry:
  %i10 = alloca i64
  %i = alloca i64
  %y = load [7 x i64], [7 x i64]* @len_y
  call void @Out_Int(i64 7, i64 0)
  call void @Out_Ln()
  store i64 0, i64* %i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i1 = load i64, i64* %i
  %i2 = load i64, i64* %i
  %multmp = mul i64 %i1, %i2
  %i3 = load i64, i64* %i
  %idx = getelementptr [7 x i64], [7 x i64]* @len_y, i64 0, i64 %i3
  store i64 %multmp, i64* %idx
  %0 = load i64, i64* %i
  %nextvar = add i64 %0, 1
  store i64 %nextvar, i64* %i
  %y4 = load [7 x i64], [7 x i64]* @len_y
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 6
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond5 = icmp sge i64 %nextvar, 6
  br i1 %loopcond5, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 0, i64* %i10
  br label %loop6

loop6:                                            ; preds = %forneg8, %forpos7, %afterloop
  %y11 = load [7 x i64], [7 x i64]* @len_y
  %i12 = load i64, i64* %i10
  %idx13 = getelementptr [7 x i64], [7 x i64]* @len_y, i64 0, i64 %i12
  %idx14 = load i64, i64* %idx13
  call void @Out_Int(i64 %idx14, i64 0)
  call void @Out_Ln()
  %1 = load i64, i64* %i10
  %nextvar15 = add i64 %1, 1
  store i64 %nextvar15, i64* %i10
  %y16 = load [7 x i64], [7 x i64]* @len_y
  br i1 true, label %forpos7, label %forneg8

forpos7:                                          ; preds = %loop6
  %loopcond17 = icmp sle i64 %nextvar15, 6
  br i1 %loopcond17, label %loop6, label %afterloop9

forneg8:                                          ; preds = %loop6
  %loopcond18 = icmp sge i64 %nextvar15, 6
  br i1 %loopcond18, label %loop6, label %afterloop9

afterloop9:                                       ; preds = %forneg8, %forpos7
  ret i64 0
}
