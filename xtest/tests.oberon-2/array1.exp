; ModuleID = 'array1'
source_filename = "array1"

@array1_x = internal global [4 x [3 x i64]] zeroinitializer
@array1_sum = internal global i64 0
@array1_i = internal global i64 0
@array1_j = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  %j20 = alloca i64
  %i15 = alloca i64
  %j = alloca i64
  %i = alloca i64
  store i64 0, i64* %i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  store i64 0, i64* %j
  br label %loop1

forpos:                                           ; preds = %afterloop4
  %loopcond9 = icmp sle i64 %nextvar8, 2
  br i1 %loopcond9, label %loop, label %afterloop

forneg:                                           ; preds = %afterloop4
  %loopcond10 = icmp sge i64 %nextvar8, 2
  br i1 %loopcond10, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 0, i64* %i15
  br label %loop11

loop1:                                            ; preds = %forneg3, %forpos2, %loop
  %sum = load i64, i64* @array1_sum
  %j5 = load i64, i64* %j
  %i6 = load i64, i64* %i
  %idx = getelementptr [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x, i64 0, i64 %j5, i64 %i6
  store i64 %sum, i64* %idx
  %0 = load i64, i64* @array1_sum
  %inc = add i64 %0, 1
  store i64 %inc, i64* @array1_sum
  %1 = load i64, i64* %j
  %nextvar = add i64 %1, 1
  store i64 %nextvar, i64* %j
  br i1 true, label %forpos2, label %forneg3

forpos2:                                          ; preds = %loop1
  %loopcond = icmp sle i64 %nextvar, 3
  br i1 %loopcond, label %loop1, label %afterloop4

forneg3:                                          ; preds = %loop1
  %loopcond7 = icmp sge i64 %nextvar, 3
  br i1 %loopcond7, label %loop1, label %afterloop4

afterloop4:                                       ; preds = %forneg3, %forpos2
  %2 = load i64, i64* %i
  %nextvar8 = add i64 %2, 1
  store i64 %nextvar8, i64* %i
  br i1 true, label %forpos, label %forneg

loop11:                                           ; preds = %forneg13, %forpos12, %afterloop
  store i64 0, i64* %j20
  br label %loop16

forpos12:                                         ; preds = %afterloop19
  %loopcond31 = icmp sle i64 %nextvar30, 2
  br i1 %loopcond31, label %loop11, label %afterloop14

forneg13:                                         ; preds = %afterloop19
  %loopcond32 = icmp sge i64 %nextvar30, 2
  br i1 %loopcond32, label %loop11, label %afterloop14

afterloop14:                                      ; preds = %forneg13, %forpos12
  ret i64 0

loop16:                                           ; preds = %forneg18, %forpos17, %loop11
  %i21 = load i64, i64* %i15
  call void @Out_Int(i64 %i21, i64 0)
  call void @Out_Char(i32 44)
  %j22 = load i64, i64* %j20
  call void @Out_Int(i64 %j22, i64 0)
  call void @Out_Char(i32 61)
  %x = load [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x
  %j23 = load i64, i64* %j20
  %i24 = load i64, i64* %i15
  %idx25 = getelementptr [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x, i64 0, i64 %j23, i64 %i24
  %idx26 = load i64, i64* %idx25
  call void @Out_Int(i64 %idx26, i64 0)
  call void @Out_Char(i32 32)
  %3 = load i64, i64* %j20
  %nextvar27 = add i64 %3, 1
  store i64 %nextvar27, i64* %j20
  br i1 true, label %forpos17, label %forneg18

forpos17:                                         ; preds = %loop16
  %loopcond28 = icmp sle i64 %nextvar27, 3
  br i1 %loopcond28, label %loop16, label %afterloop19

forneg18:                                         ; preds = %loop16
  %loopcond29 = icmp sge i64 %nextvar27, 3
  br i1 %loopcond29, label %loop16, label %afterloop19

afterloop19:                                      ; preds = %forneg18, %forpos17
  call void @Out_Ln()
  %4 = load i64, i64* %i15
  %nextvar30 = add i64 %4, 1
  store i64 %nextvar30, i64* %i15
  br i1 true, label %forpos12, label %forneg13
}
