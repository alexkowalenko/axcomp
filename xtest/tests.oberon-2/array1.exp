; ModuleID = 'array1'
source_filename = "array1"

@array1_x = internal global [4 x [3 x i64]] zeroinitializer
@array1_sum = internal global i64 0
@array1_i = internal global i64 0
@array1_j = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  store i64 0, i64* @array1_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  store i64 0, i64* @array1_j
  br label %loop1

forpos:                                           ; preds = %afterloop4
  %loopcond8 = icmp sle i64 %nextvar7, 2
  br i1 %loopcond8, label %loop, label %afterloop

forneg:                                           ; preds = %afterloop4
  %loopcond9 = icmp sge i64 %nextvar7, 2
  br i1 %loopcond9, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 0, i64* @array1_i
  br label %loop10

loop1:                                            ; preds = %forneg3, %forpos2, %loop
  %sum = load i64, i64* @array1_sum
  %j = load i64, i64* @array1_j
  %i = load i64, i64* @array1_i
  %idx = getelementptr [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x, i64 0, i64 %j, i64 %i
  store i64 %sum, i64* %idx
  %0 = load i64, i64* @array1_sum
  %inc = add i64 %0, 1
  store i64 %inc, i64* @array1_sum
  %index = load i64, i64* @array1_j
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @array1_j
  br i1 true, label %forpos2, label %forneg3

forpos2:                                          ; preds = %loop1
  %loopcond = icmp sle i64 %nextvar, 3
  br i1 %loopcond, label %loop1, label %afterloop4

forneg3:                                          ; preds = %loop1
  %loopcond5 = icmp sge i64 %nextvar, 3
  br i1 %loopcond5, label %loop1, label %afterloop4

afterloop4:                                       ; preds = %forneg3, %forpos2
  %index6 = load i64, i64* @array1_i
  %nextvar7 = add i64 %index6, 1
  store i64 %nextvar7, i64* @array1_i
  br i1 true, label %forpos, label %forneg

loop10:                                           ; preds = %forneg12, %forpos11, %afterloop
  store i64 0, i64* @array1_j
  br label %loop14

forpos11:                                         ; preds = %afterloop17
  %loopcond30 = icmp sle i64 %nextvar29, 2
  br i1 %loopcond30, label %loop10, label %afterloop13

forneg12:                                         ; preds = %afterloop17
  %loopcond31 = icmp sge i64 %nextvar29, 2
  br i1 %loopcond31, label %loop10, label %afterloop13

afterloop13:                                      ; preds = %forneg12, %forpos11
  ret i64 0

loop14:                                           ; preds = %forneg16, %forpos15, %loop10
  %i18 = load i64, i64* @array1_i
  call void @Out_Int(i64 %i18, i64 0)
  call void @Out_Char(i32 44)
  %j19 = load i64, i64* @array1_j
  call void @Out_Int(i64 %j19, i64 0)
  call void @Out_Char(i32 61)
  %x = load [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x
  %j20 = load i64, i64* @array1_j
  %i21 = load i64, i64* @array1_i
  %idx22 = getelementptr [4 x [3 x i64]], [4 x [3 x i64]]* @array1_x, i64 0, i64 %j20, i64 %i21
  %idx23 = load i64, i64* %idx22
  call void @Out_Int(i64 %idx23, i64 0)
  call void @Out_Char(i32 32)
  %index24 = load i64, i64* @array1_j
  %nextvar25 = add i64 %index24, 1
  store i64 %nextvar25, i64* @array1_j
  br i1 true, label %forpos15, label %forneg16

forpos15:                                         ; preds = %loop14
  %loopcond26 = icmp sle i64 %nextvar25, 3
  br i1 %loopcond26, label %loop14, label %afterloop17

forneg16:                                         ; preds = %loop14
  %loopcond27 = icmp sge i64 %nextvar25, 3
  br i1 %loopcond27, label %loop14, label %afterloop17

afterloop17:                                      ; preds = %forneg16, %forpos15
  call void @Out_Ln()
  %index28 = load i64, i64* @array1_i
  %nextvar29 = add i64 %index28, 1
  store i64 %nextvar29, i64* @array1_i
  br i1 true, label %forpos11, label %forneg12
}
