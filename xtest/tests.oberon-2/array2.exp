; ModuleID = 'array2'
source_filename = "array2"

@array2_x = internal global [5 x [4 x [3 x i64]]] zeroinitializer
@array2_sum = internal global i64 0
@array2_i = internal global i64 0
@array2_j = internal global i64 0
@array2_k = internal global i64 0

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  store i64 0, i64* @array2_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  store i64 0, i64* @array2_j
  br label %loop1

forpos:                                           ; preds = %afterloop4
  %loopcond16 = icmp sle i64 %nextvar15, 2
  br i1 %loopcond16, label %loop, label %afterloop

forneg:                                           ; preds = %afterloop4
  %loopcond17 = icmp sge i64 %nextvar15, 2
  br i1 %loopcond17, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  store i64 0, i64* @array2_i
  br label %loop18

loop1:                                            ; preds = %forneg3, %forpos2, %loop
  store i64 0, i64* @array2_k
  br label %loop5

forpos2:                                          ; preds = %afterloop8
  %loopcond12 = icmp sle i64 %nextvar11, 3
  br i1 %loopcond12, label %loop1, label %afterloop4

forneg3:                                          ; preds = %afterloop8
  %loopcond13 = icmp sge i64 %nextvar11, 3
  br i1 %loopcond13, label %loop1, label %afterloop4

afterloop4:                                       ; preds = %forneg3, %forpos2
  %index14 = load i64, i64* @array2_i
  %nextvar15 = add i64 %index14, 1
  store i64 %nextvar15, i64* @array2_i
  br i1 true, label %forpos, label %forneg

loop5:                                            ; preds = %forneg7, %forpos6, %loop1
  %sum = load i64, i64* @array2_sum
  %k = load i64, i64* @array2_k
  %j = load i64, i64* @array2_j
  %i = load i64, i64* @array2_i
  %idx = getelementptr [5 x [4 x [3 x i64]]], [5 x [4 x [3 x i64]]]* @array2_x, i64 0, i64 %k, i64 %j, i64 %i
  store i64 %sum, i64* %idx
  %0 = load i64, i64* @array2_sum
  %inc = add i64 %0, 1
  store i64 %inc, i64* @array2_sum
  %index = load i64, i64* @array2_k
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @array2_k
  br i1 true, label %forpos6, label %forneg7

forpos6:                                          ; preds = %loop5
  %loopcond = icmp sle i64 %nextvar, 4
  br i1 %loopcond, label %loop5, label %afterloop8

forneg7:                                          ; preds = %loop5
  %loopcond9 = icmp sge i64 %nextvar, 4
  br i1 %loopcond9, label %loop5, label %afterloop8

afterloop8:                                       ; preds = %forneg7, %forpos6
  %index10 = load i64, i64* @array2_j
  %nextvar11 = add i64 %index10, 1
  store i64 %nextvar11, i64* @array2_j
  br i1 true, label %forpos2, label %forneg3

loop18:                                           ; preds = %forneg20, %forpos19, %afterloop
  store i64 0, i64* @array2_j
  br label %loop22

forpos19:                                         ; preds = %afterloop25
  %loopcond48 = icmp sle i64 %nextvar47, 2
  br i1 %loopcond48, label %loop18, label %afterloop21

forneg20:                                         ; preds = %afterloop25
  %loopcond49 = icmp sge i64 %nextvar47, 2
  br i1 %loopcond49, label %loop18, label %afterloop21

afterloop21:                                      ; preds = %forneg20, %forpos19
  ret i64 0

loop22:                                           ; preds = %forneg24, %forpos23, %loop18
  store i64 0, i64* @array2_k
  br label %loop26

forpos23:                                         ; preds = %afterloop29
  %loopcond44 = icmp sle i64 %nextvar43, 3
  br i1 %loopcond44, label %loop22, label %afterloop25

forneg24:                                         ; preds = %afterloop29
  %loopcond45 = icmp sge i64 %nextvar43, 3
  br i1 %loopcond45, label %loop22, label %afterloop25

afterloop25:                                      ; preds = %forneg24, %forpos23
  call void @Out_Ln()
  %index46 = load i64, i64* @array2_i
  %nextvar47 = add i64 %index46, 1
  store i64 %nextvar47, i64* @array2_i
  br i1 true, label %forpos19, label %forneg20

loop26:                                           ; preds = %forneg28, %forpos27, %loop22
  %i30 = load i64, i64* @array2_i
  call void @Out_Int(i64 %i30, i64 0)
  call void @Out_Char(i32 44)
  %j31 = load i64, i64* @array2_j
  call void @Out_Int(i64 %j31, i64 0)
  call void @Out_Char(i32 44)
  %k32 = load i64, i64* @array2_k
  call void @Out_Int(i64 %k32, i64 0)
  call void @Out_Char(i32 61)
  %x = load [5 x [4 x [3 x i64]]], [5 x [4 x [3 x i64]]]* @array2_x
  %k33 = load i64, i64* @array2_k
  %j34 = load i64, i64* @array2_j
  %i35 = load i64, i64* @array2_i
  %idx36 = getelementptr [5 x [4 x [3 x i64]]], [5 x [4 x [3 x i64]]]* @array2_x, i64 0, i64 %k33, i64 %j34, i64 %i35
  %idx37 = load i64, i64* %idx36
  call void @Out_Int(i64 %idx37, i64 0)
  call void @Out_Char(i32 32)
  %index38 = load i64, i64* @array2_k
  %nextvar39 = add i64 %index38, 1
  store i64 %nextvar39, i64* @array2_k
  br i1 true, label %forpos27, label %forneg28

forpos27:                                         ; preds = %loop26
  %loopcond40 = icmp sle i64 %nextvar39, 4
  br i1 %loopcond40, label %loop26, label %afterloop29

forneg28:                                         ; preds = %loop26
  %loopcond41 = icmp sge i64 %nextvar39, 4
  br i1 %loopcond41, label %loop26, label %afterloop29

afterloop29:                                      ; preds = %forneg28, %forpos27
  call void @Out_Ln()
  %index42 = load i64, i64* @array2_j
  %nextvar43 = add i64 %index42, 1
  store i64 %nextvar43, i64* @array2_j
  br i1 true, label %forpos23, label %forneg24
}
