; ModuleID = 'case6'
source_filename = "case6"

@case6_i = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 120, i32 32, i32 49, i32 0]
@STRING_1 = private global [0 x i32] [i32 120, i32 32, i32 50, i32 46, i32 46, i32 52, i32 0]
@STRING_2 = private global [0 x i32] [i32 120, i32 32, i32 53, i32 44, i32 32, i32 56, i32 0]
@STRING_3 = private global [0 x i32] [i32 120, i32 32, i32 49, i32 48, i32 44, i32 32, i32 49, i32 50, i32 46, i32 46, i32 49, i32 52, i32 0]
@STRING_4 = private global [0 x i32] [i32 69, i32 76, i32 83, i32 69, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 1, i64* @case6_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @case6_i
  call void @Out_Int(i64 %i, i64 0)
  call void @Out_Char(i32 32)
  %i1 = load i64, i64* @case6_i
  switch i64 %i1, label %range [
    i64 1, label %case.element0
    i64 5, label %case.element2
    i64 8, label %case.element2
    i64 10, label %case.element3
  ]

forpos:                                           ; preds = %case_end
  %loopcond = icmp sle i64 %nextvar, 15
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %case_end
  %loopcond2 = icmp sge i64 %nextvar, 15
  br i1 %loopcond2, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0

range:                                            ; preds = %loop
  br label %case.range0

case.range0:                                      ; preds = %range
  %0 = icmp sle i64 2, %i1
  %1 = icmp sle i64 %i1, 4
  %2 = and i1 %0, %1
  br i1 %2, label %case.element1, label %case.range1

case.range1:                                      ; preds = %case.range0
  %3 = icmp sle i64 12, %i1
  %4 = icmp sle i64 %i1, 14
  %5 = and i1 %3, %4
  br i1 %5, label %case.element3, label %else

case.element0:                                    ; preds = %loop
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %case_end

case.element1:                                    ; preds = %case.range0
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %case_end

case.element2:                                    ; preds = %loop, %loop
  call void @Out_String([0 x i32]* @STRING_2)
  call void @Out_Ln()
  br label %case_end

case.element3:                                    ; preds = %case.range1, %loop
  call void @Out_String([0 x i32]* @STRING_3)
  call void @Out_Ln()
  br label %case_end

else:                                             ; preds = %case.range1
  call void @Out_String([0 x i32]* @STRING_4)
  call void @Out_Ln()
  br label %case_end

case_end:                                         ; preds = %else, %case.element3, %case.element2, %case.element1, %case.element0
  %index = load i64, i64* @case6_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @case6_i
  br i1 true, label %forpos, label %forneg
}
