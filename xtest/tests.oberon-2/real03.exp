; ModuleID = 'real03'
source_filename = "real03"

@real03_x = internal global double 0.000000e+00
@STRING_0 = private global [0 x i32] [i32 77, i32 105, i32 110, i32 58, i32 32, i32 0]
@STRING_1 = private global [0 x i32] [i32 77, i32 97, i32 120, i32 58, i32 32, i32 0]
@STRING_2 = private global [0 x i32] [i32 65, i32 98, i32 115, i32 58, i32 32, i32 0]
@STRING_3 = private global [0 x i32] [i32 70, i32 108, i32 111, i32 111, i32 114, i32 58, i32 32, i32 0]
@STRING_4 = private global [0 x i32] [i32 70, i32 76, i32 84, i32 58, i32 32, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Real(double, i64)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Real(double 0x10000000000000, i64 0)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Real(double 0x7FEFFFFFFFFFFFFF, i64 0)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* @STRING_2)
  %0 = call i64 @ABS(i64 -1)
  call void @Out_Int(i64 %0, i64 0)
  call void @Out_Ln()
  store double -1.200000e+00, double* @real03_x
  call void @Out_String([0 x i32]* @STRING_2)
  %x = load double, double* @real03_x
  %1 = call double @llvm.fabs.f64(double %x)
  call void @Out_Real(double %1, i64 0)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* @STRING_3)
  %x1 = load double, double* @real03_x
  %2 = call double @llvm.floor.f64(double %x1)
  %3 = fptosi double %2 to i64
  call void @Out_Int(i64 %3, i64 0)
  call void @Out_Ln()
  call void @Out_String([0 x i32]* @STRING_4)
  call void @Out_Real(double 3.000000e+00, i64 0)
  call void @Out_Ln()
  ret i64 0
}

declare i64 @ABS(i64)

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #0

attributes #0 = { nounwind readnone speculatable willreturn }
