; ModuleID = 'set2'
source_filename = "set2"

@set2_x = internal global i64 0
@set2_y = internal global i64 0
@set2_z = internal global i64 0
@set2_a = internal global i64 0
@STRING_0 = private global [0 x i32] [i32 32, i32 105, i32 110, i32 32, i32 115, i32 101, i32 116, i32 32, i32 120, i32 0]
@STRING_1 = private global [0 x i32] [i32 32, i32 105, i32 110, i32 32, i32 115, i32 101, i32 116, i32 32, i32 121, i32 0]
@STRING_2 = private global [0 x i32] [i32 120, i32 32, i32 61, i32 32, i32 122, i32 0]
@STRING_3 = private global [0 x i32] [i32 120, i32 32, i32 35, i32 32, i32 122, i32 0]
@STRING_4 = private global [0 x i32] [i32 121, i32 32, i32 35, i32 32, i32 122, i32 0]
@STRING_5 = private global [0 x i32] [i32 70, i32 105, i32 110, i32 105, i32 115, i32 104, i32 33, i32 0]

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store i64 3, i64* @set2_a
  %a = load i64, i64* @set2_a
  %0 = shl i64 1, %a
  %1 = or i64 0, %0
  store i64 %1, i64* @set2_z
  %a1 = load i64, i64* @set2_a
  %z = load i64, i64* @set2_z
  %2 = shl i64 1, %a1
  %3 = and i64 %z, %2
  %4 = icmp ugt i64 %3, 0
  br i1 %4, label %then, label %ifcont

then:                                             ; preds = %entry
  %a2 = load i64, i64* @set2_a
  call void @Out_Int(i64 %a2, i64 0)
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %ifcont

ifcont:                                           ; preds = %then, %entry
  %z3 = load i64, i64* @set2_z
  %5 = and i64 %z3, 2
  %6 = icmp ugt i64 %5, 0
  br i1 %6, label %then4, label %ifcont5

then4:                                            ; preds = %ifcont
  call void @Out_Int(i64 1, i64 0)
  call void @Out_String([0 x i32]* @STRING_0)
  call void @Out_Ln()
  br label %ifcont5

ifcont5:                                          ; preds = %then4, %ifcont
  %7 = call i64 @Set_range(i64 0, i64 7, i64 17)
  store i64 %7, i64* @set2_y
  %y = load i64, i64* @set2_y
  %8 = and i64 %y, 128
  %9 = icmp ugt i64 %8, 0
  br i1 %9, label %then6, label %ifcont7

then6:                                            ; preds = %ifcont5
  call void @Out_Int(i64 7, i64 0)
  call void @Out_String([0 x i32]* @STRING_1)
  call void @Out_Ln()
  br label %ifcont7

ifcont7:                                          ; preds = %then6, %ifcont5
  store i64 8, i64* @set2_x
  %x = load i64, i64* @set2_x
  %z8 = load i64, i64* @set2_z
  %10 = icmp eq i64 %x, %z8
  br i1 %10, label %then9, label %ifcont10

then9:                                            ; preds = %ifcont7
  call void @Out_String([0 x i32]* @STRING_2)
  call void @Out_Ln()
  br label %ifcont10

ifcont10:                                         ; preds = %then9, %ifcont7
  %x11 = load i64, i64* @set2_x
  %z12 = load i64, i64* @set2_z
  %11 = icmp ne i64 %x11, %z12
  br i1 %11, label %then13, label %ifcont14

then13:                                           ; preds = %ifcont10
  call void @Out_String([0 x i32]* @STRING_3)
  call void @Out_Ln()
  br label %ifcont14

ifcont14:                                         ; preds = %then13, %ifcont10
  %y15 = load i64, i64* @set2_y
  %z16 = load i64, i64* @set2_z
  %12 = icmp ne i64 %y15, %z16
  br i1 %12, label %then17, label %ifcont18

then17:                                           ; preds = %ifcont14
  call void @Out_String([0 x i32]* @STRING_4)
  call void @Out_Ln()
  br label %ifcont18

ifcont18:                                         ; preds = %then17, %ifcont14
  call void @Out_String([0 x i32]* @STRING_5)
  call void @Out_Ln()
  ret i64 0
}

declare i64 @Set_range(i64, i64, i64)
