; ModuleID = 'chr'
source_filename = "chr"

@chr_x = internal global i64 0
@chr_i = internal global i64 0
@chr_c = internal global i64 0

declare i32 @CHR(i64)

declare void @Out_Ln()

declare void @Out_Char(i32)

define i64 @output() {
entry:
  store i64 65, i64* @chr_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @chr_i
  %0 = call i32 @CHR(i64 %i)
  call void @Out_Char(i32 %0)
  %index = load i64, i64* @chr_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @chr_i
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 90
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond1 = icmp sge i64 %nextvar, 90
  br i1 %loopcond1, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  call void @Out_Ln()
  store i64 97, i64* @chr_c
  br label %loop2

loop2:                                            ; preds = %forneg4, %forpos3, %afterloop
  %c = load i64, i64* @chr_c
  %1 = call i32 @CHR(i64 %c)
  call void @Out_Char(i32 %1)
  %index6 = load i64, i64* @chr_c
  %nextvar7 = add i64 %index6, 1
  store i64 %nextvar7, i64* @chr_c
  br i1 true, label %forpos3, label %forneg4

forpos3:                                          ; preds = %loop2
  %loopcond8 = icmp sle i64 %nextvar7, 122
  br i1 %loopcond8, label %loop2, label %afterloop5

forneg4:                                          ; preds = %loop2
  %loopcond9 = icmp sge i64 %nextvar7, 122
  br i1 %loopcond9, label %loop2, label %afterloop5

afterloop5:                                       ; preds = %forneg4, %forpos3
  call void @Out_Ln()
  ret i64 0
}
