; ModuleID = 'string4'
source_filename = "string4"

@string4_x = internal global [0 x i32]* null
@string4_xx = internal global [3 x i32] zeroinitializer
@string4_c = internal global i32 0
@STRING_0 = private global [0 x i32] [i32 72, i32 101, i32 108, i32 108, i32 111, i32 0]

declare void @Out_Ln()

declare void @Out_Char(i32)

declare void @Out_String([0 x i32]*)

define i64 @output() {
entry:
  store [0 x i32]* @STRING_0, [0 x i32]** @string4_x
  store i32 65, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @string4_xx, i64 0, i64 0)
  %x = load [0 x i32]*, [0 x i32]** @string4_x
  call void @Out_String([0 x i32]* %x)
  call void @Out_Ln()
  %x1 = load [0 x i32]*, [0 x i32]** @string4_x
  %0 = load [0 x i32]*, [0 x i32]** @string4_x
  %idx = getelementptr [0 x i32], [0 x i32]* %0, i64 0, i64 0
  %idx2 = load i32, i32* %idx
  store i32 %idx2, i32* @string4_c
  %c = load i32, i32* @string4_c
  call void @Out_Char(i32 %c)
  call void @Out_Ln()
  %xx = load [3 x i32], [3 x i32]* @string4_xx
  %idx3 = load i32, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @string4_xx, i64 0, i64 0)
  store i32 %idx3, i32* @string4_c
  %c4 = load i32, i32* @string4_c
  call void @Out_Char(i32 %c4)
  call void @Out_Ln()
  %c5 = load i32, i32* @string4_c
  %1 = zext i32 %c5 to i64
  ret i64 %1
}
