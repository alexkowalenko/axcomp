; ModuleID = 'ord'
source_filename = "ord"

@ord_i = internal global i64 0

declare i32 @CHR(i64)

declare i64 @ORD(i32)

declare void @Out_Ln()

declare void @Out_Int(i64, i64)

declare void @Out_Char(i32)

define i64 @output() {
entry:
  store i64 65, i64* @ord_i
  br label %loop

loop:                                             ; preds = %forneg, %forpos, %entry
  %i = load i64, i64* @ord_i
  %0 = call i32 @CHR(i64 %i)
  call void @Out_Char(i32 %0)
  call void @Out_Char(i32 32)
  %i1 = load i64, i64* @ord_i
  %1 = call i32 @CHR(i64 %i1)
  %2 = call i64 @ORD(i32 %1)
  call void @Out_Int(i64 %2, i64 0)
  call void @Out_Ln()
  %index = load i64, i64* @ord_i
  %nextvar = add i64 %index, 1
  store i64 %nextvar, i64* @ord_i
  br i1 true, label %forpos, label %forneg

forpos:                                           ; preds = %loop
  %loopcond = icmp sle i64 %nextvar, 90
  br i1 %loopcond, label %loop, label %afterloop

forneg:                                           ; preds = %loop
  %loopcond2 = icmp sge i64 %nextvar, 90
  br i1 %loopcond2, label %loop, label %afterloop

afterloop:                                        ; preds = %forneg, %forpos
  ret i64 0
}
